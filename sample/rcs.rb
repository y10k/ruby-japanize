# -*- coding: utf-8 -*-

require 'japanize'

# ばらばらな点々で描く立体画像
# 使い方: rcs.rb rcs.dat

元の幅 = 40.0                   # 元のパターンの幅
生成後の幅 = 78.0               # 生成する立体画像の幅
生成後の半幅 = 生成後の幅 / 2.0
眼の間隔 = 20.0                 # 二つの眼の間の間隔
基準距離 = 1.0                  # 画面と基準平面の距離(平行法なら深さ、交差法なら高さ)
単位距離 = 0.2                  # z値の単位
文字表 = "abcdefghijklmnopqrstuvwxyz0123456789#!$%^&*()-=\\[];'`,./"
_種 = 乱数の種を設定()          # 実際はRubyでは必要ない - 乱数を最初に
                                # 呼ぶときに乱数の種を自動的に設定する

この条件なら{ 行を取得() }.繰り返す{
#  印字($_)
  右側の横座標 = -生成後の半幅; 奥行座標 = 基準距離 * 1.0; 左側の横座標の最大値 = -999
  出力行 = ""
  この条件なら{ 右側の横座標 < 生成後の半幅 }.繰り返す{
    横座標 = 右側の横座標 * (1 + 奥行座標) - 奥行座標 * 眼の間隔 / 2
    位置 = (横座標 / (1 + 基準距離) + 元の幅 / 2)
    等級 = 無値                 # 肯否分岐がスコープを作るので、あらかじめ局所変数を初期化しておく
    もし条件が{ 1 < 位置 && 位置 < $_.長さ }.であるなら{
      等級 = $_[位置, 1].整数に変換
    }.でなければ{
      等級 = 0
    }.である
    奥行座標 = 基準距離 - 単位距離 * 等級
    左側の横座標 = 右側の横座標 - 眼の間隔 * 奥行座標 / (1 + 奥行座標)
    文字 = 無値                 # 肯否分岐がスコープを作るので、あらかじめ局所変数を初期化しておく
    もし条件が{ 左側の横座標 < -生成後の半幅 || 左側の横座標 >= 生成後の半幅 || 左側の横座標 <= 左側の横座標の最大値 }.であるなら{
      乱数値 = 乱数(文字表.長さ)
      文字 = 文字表[乱数値, 1]
    }.でなければ{
      文字 = 出力行[左側の横座標 + 生成後の半幅, 1]
      左側の横座標の最大値 = 左側の横座標
    }.である
    出力行 += 文字
    右側の横座標 += 1
  }
  印字(出力行, "\n")
}
