#!/usr/bin/ruby
# -*- coding: utf-8 -*-

require 'japanize'

組(:ゲーム盤) {
  定義(:消去) {
    印字 "\e[2J"
  }

  定義(:位置) {|横, 縦|
    整形して印字 "\e[%d;%dH", 縦 + 1, 横 * 2 + 1
  }

  定義(:色付きの文字列) {|色の番号, ある文字列|
    整形して印字 "\e[%dm%s\e[0m", 色の番号, ある文字列
  }

  定義(:配置) {|横, 縦, 色の番号, ある文字列|
    位置(横, 縦); 色付きの文字列(色の番号, ある文字列)
    位置(0, @縦幅); 印字 "残り:", @印の残数, "/", @未開の残数, "   "
    位置(横, 縦)
  }

  秘密 :消去, :位置, :色付きの文字列, :配置

  # 日本語の定数の実態はクラスメソッドなので、インスタンスメソッドから
  # 参照するときは 生成元:: を付ける必要がある
  日本語の定数 :登場人物, [ "・", "１", "２", "３", "４", "５", "６", "７", "８", "★", "●", "@@" ]
  日本語の定数 :配色, [ 46, 43, 45 ] # 既定, 開いた, 終わった

  定義(:初期化) {|縦幅, 横幅, 爆弾の数|
    # ゲーム盤の生成(h:縦，w:横，m:爆弾の数)
    @縦幅 = 縦幅; @横幅 = 横幅; @爆弾の数 = 爆弾の数
    最初からやり直す
  }

  定義(:最初からやり直す) {
    # ゲーム盤を(再)初期化する
    乱数の種を設定
    @横の現在地 = 0; @縦の現在地 = 0; @印の残数 = @爆弾の数
    @終わった = 偽値
    @情報 = 配列.新規(@縦幅 * @横幅)
    @状態 = 配列.新規(@縦幅 * @横幅)
    @未開の残数 = @縦幅 * @横幅
    @未開の残数.回{|数| @情報[数] = 0 }
    @爆弾の数.回{
      循環{|制御|
        位置 = 乱数(@未開の残数 - 1)
        もし条件が{ @情報[位置] == 0 }.であるなら{
          @情報[位置] = 1
          制御.終わる
        }.である
      }
    }
    消去; 位置(0, 0)
    @縦幅.回{|縦| 位置(0, 縦); 色付きの文字列(生成元::配色[0], 生成元::登場人物[0] * @横幅) }
    位置(@横の現在地, @縦の現在地)
  }

  定義(:印を付ける) {
    # 現在のカーソル位置にマークをつける
    領域{|制御|
      もし条件が{ @状態[@横幅 * @縦の現在地 + @横の現在地] != 無値 }.であるなら{ 制御.戻る }.である
      @状態[@横幅 * @縦の現在地 + @横の現在地] = :印
      @印の残数 = @印の残数 - 1
      @未開の残数 = @未開の残数 - 1
      配置(@横の現在地, @縦の現在地, 生成元::配色[1], 生成元::登場人物[9])
    }
  }

  定義(:開く) {|横=@横の現在地, 縦=@縦の現在地|
    # 現在のカーソル位置をオープンにする
    # 爆弾があればゲームオーバー
    領域{|制御|
      もし条件が{ @状態[@横幅 * 縦 + 横] == :開  }.であるなら{ 制御.戻る 0 }.である
      もし条件が{ @状態[@横幅 * 縦 + 横] == 無値 }.であるなら{ @未開の残数 = @未開の残数 - 1 }.である
      もし条件が{ @状態[@横幅 * 縦 + 横] == :印  }.であるなら{ @印の残数 = @印の残数 + 1 }.である
      @状態[@横幅 * 縦 + 横] = :開
      もし条件が{ 取得(横, 縦) == 1 }.であるなら{ @終わった = 真値 }.である
      数 = 数える(横, 縦)
      配置(横, 縦, 生成元::配色[1], 生成元::登場人物[数])
      もし条件が{ 数 != 0 }.であるなら{ 制御.戻る }.である
      もし条件が{ 横 > 0         && 縦 > 0         }.であるなら{ 開く(横 - 1, 縦 - 1) }.である
      もし条件が{                   縦 > 0         }.であるなら{ 開く(横,     縦 - 1) }.である
      もし条件が{ 横 < @横幅 - 1 && 縦 > 0         }.であるなら{ 開く(横 + 1, 縦 - 1) }.である
      もし条件が{ 横 > 0                           }.であるなら{ 開く(横 - 1, 縦    ) }.である
      もし条件が{ 横 < @横幅 - 1                   }.であるなら{ 開く(横 + 1, 縦    ) }.である
      もし条件が{ 横 > 0         && 縦 < @縦幅 - 1 }.であるなら{ 開く(横 - 1, 縦 + 1) }.である
      もし条件が{                   縦 < @縦幅 - 1 }.であるなら{ 開く(横,     縦 + 1) }.である
      もし条件が{ 横 < @横幅 - 1 && 縦 < @縦幅 - 1 }.であるなら{ 開く(横 + 1, 縦 + 1) }.である
      位置(@横の現在地, @縦の現在地)
    }
  }

  定義(:取得) {|横, 縦|
    # (横,縦)の位置の爆弾の数(0または1)を返す
    もし条件が{ 横 < 0 }.であるなら{
      0
    }.もし条件が{ 横 >= @横幅 }.であるなら{
      0
    }.もし条件が{ 縦 < 0 }.であるなら{
      0
    }.もし条件が{ 縦 >= @縦幅 }.であるなら{
      0
    }.でなければ{
      @情報[縦 * @横幅 + 横]
    }.である
  }

  定義(:数える) {|横, 縦|
    # (横,縦)に隣接する爆弾の数を返す
    [ 取得(横 - 1, 縦 - 1), 取得(横, 縦 - 1), 取得(横 + 1, 縦 - 1),
      取得(横 - 1, 縦    ),                   取得(横 + 1, 縦    ),
      取得(横 - 1, 縦 + 1), 取得(横, 縦 + 1), 取得(横 + 1, 縦 + 1)
    ].合計
  }

  定義(:終わる) {|勝った|
    # ゲームの終了
    中断する
    もし条件が{ 勝った }.でなければ{
      位置(@縦の現在地, @横の現在地); 印字 生成元::登場人物[11]
    }.である
    位置(0, @縦幅)
    もし条件が{ 勝った }.であるなら{
      印字 "*** 勝ちました !! ***"
    }.でなければ{
      印字 "*** 負けました ***"
    }.である
  }

  定義(:終わったか?) {
    # ゲームの終了チェック
    # 終了処理も呼び出す
    余りが無い = (@印の残数 + @未開の残数 == 0)
    もし条件が{ @終わった || 余りが無い }.であるなら{
      終わる(余りが無い)
      真値
    }.でなければ{
      偽値
    }.である
  }

  定義(:中断する) {
    # ゲームの中断(または終了)
    # 盤面を全て見せる
    @縦幅.回{|縦|
      位置(0, 縦)
      @横幅.回{|横|
        色付きの文字列(もし条件が{ @状態[縦 * @横幅 + 横] == :印 }.であるなら{ 生成元::配色[1] }.でなければ{ 生成元::配色[2] }.である,
                       もし条件が{ 取得(横, 縦) == 1 }.であるなら{ 生成元::登場人物[10] }.でなければ{ 生成元::登場人物[数える(横, 縦)] }.である)
      }
    }
  }

  定義(:下へ進む) {
    # カーソルを下に
    もし条件が{ @縦の現在地 < @縦幅 - 1 }.であるなら{ @縦の現在地 = @縦の現在地 + 1; 位置(@横の現在地, @縦の現在地) }.である
  }

  定義(:上へ進む) {
    # カーソルを上に
    もし条件が{ @縦の現在地 > 0 }.であるなら{ @縦の現在地 = @縦の現在地 - 1; 位置(@横の現在地, @縦の現在地) }.である
  }

  定義(:左へ進む) {
    # カーソルを左に
    もし条件が{ @横の現在地 > 0 }.であるなら{ @横の現在地 = @横の現在地 - 1; 位置(@横の現在地, @縦の現在地) }.である
  }

  定義(:右へ進む) {
    # カーソルを右に
    もし条件が{ @横の現在地 < @横幅 - 1 }.であるなら{ @横の現在地 = @横の現在地 + 1; 位置(@横の現在地, @縦の現在地) }.である
  }
}

あるゲーム盤 = ゲーム盤.新規(10, 10, 10)
外部のコマンドを実行する("stty raw -echo")
領域{|制御|
  制御.本処理{
    循環{|制御|
      この値が{
        標準入力.文字を取得
      }.もし{ ?n }.であるなら{  # new game
        あるゲーム盤.最初からやり直す
      }.もし{ ?m }.であるなら{  # mark
        あるゲーム盤.印を付ける
      }.もし{ ?j }.であるなら{
        あるゲーム盤.下へ進む
      }.もし{ ?k }.であるなら{
        あるゲーム盤.上へ進む
      }.もし{ ?h }.であるなら{
        あるゲーム盤.左へ進む
      }.もし{ ?l }.であるなら{
        あるゲーム盤.右へ進む
      }.もし{ ?\s }.であるなら{
        あるゲーム盤.開く
      }.もし{ ?q }.か{ ?\C-c }.であるなら{ # quit game
        あるゲーム盤.中断する
        制御.終わる
      }.である
      もし条件が{ あるゲーム盤.終わったか? }.であるなら{
        もし条件が{ 標準入力.文字を取得 == ?q }.であるなら{ 制御.終わる }.である
        あるゲーム盤.最初からやり直す
      }.である
    }
  }
  制御.後始末{
    外部のコマンドを実行する("stty -raw echo")
  }
}
印字 "\n"
