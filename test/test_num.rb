# -*- coding: utf-8 -*-

require 'japanize/core'
require 'warning'

要求 'japanize/num'
要求 'japanize/test_unit'

部(日本語化) {
  部(:試験) {
    組(:数値の操作の試験, 原型: 試験単位::試験事例) {
      資料('剰余'             => [ :剰余,             :modulo ],
           '絶対値'           => [ :絶対値,           :abs ],
           '絶対的な大きさ'   => [ :絶対的な大きさ,   :magnitude ],
           '絶対値の二乗'     => [ :絶対値の二乗,     :abs2 ],
           '偏角'             => [ :偏角,             :arg ],
           '角度'             => [ :角度,             :angle ],
           '位相'             => [ :位相,             :phase ],
           '切り上げ'         => [ :切り上げ,         :ceil ],
           '強制'             => [ :強制,             :coerce ],
           '共役'             => [ :共役,             :conj ],
           '複素共役'         => [ :複素共役,         :conjugate ],
           '分母'             => [ :分母,             :denominator ],
           '除法'             => [ :除法,             :div ],
           '除算'             => [ :除算,             :divmod ],
           '浮動小数点の除法' => [ :浮動小数点の除法, :fdiv ],
           '有限か?'          => [ :有限か?,          :finite? ],
           '切り下げ'         => [ :切り下げ,         :floor ],
           '虚数'             => [ :虚数,             :i ],
           '虚部'             => [ :虚部,             :imaginary ],
           '無限か?'          => [ :無限か?,          :infinite? ],
           '整数か?'          => [ :整数か?,          :integer? ],
           '負数か?'          => [ :負数か?,          :negative? ],
           '非零か?'          => [ :非零か?,          :nonzero? ],
           '分子'             => [ :分子,             :numerator ],
           '極形式'           => [ :極形式,           :polar ],
           '極座標形式'       => [ :極座標形式,       :polar ],
           '正数か?'          => [ :正数か?,          :positive? ],
           '商'               => [ :商,               :quo ],
           '実部'             => [ :実部,             :real ],
           '実数か?'          => [ :実数か?,          :real? ],
           '直交形式'         => [ :直交形式,         :rect ],
           '直交座標形式'     => [ :直交座標形式,     :rectangular ],
           '余り'             => [ :余り,             :remainder ],
           '端数を丸める'     => [ :端数を丸める,     :round ],
           '間を進む'         => [ :間を進む,         :step ],
           '複素数に変換'     => [ :複素数に変換,     :to_c ],
           '切り捨て'         => [ :切り捨て,         :truncate ],
           '零か?'            => [ :零か?,            :zero? ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(数値.新規, 日本語の別名, 元の名前)
        含まれることを確認(数値.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:整数の操作の試験, 原型: 試験単位::試験事例) {
      資料('平方根' => [ :平方根, :sqrt ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(整数, 日本語の別名, 元の名前)
        含まれることを確認(整数.公開された操作の一覧, 日本語の別名)
      }

      資料('剰余'                      => [ :剰余,                      :modulo ],
           '冪乗'                      => [ :冪乗,                      :pow ],
           '除法'                      => [ :除法,                      :div ],
           '絶対値'                    => [ :絶対値,                    :abs ],
           '絶対的な大きさ'            => [ :絶対的な大きさ,            :magnitude ],
           '全てのビットが立つか?'     => [ :全てのビットが立つか?,     :allbits? ],
           '何れかのビットが立つか?'   => [ :何れかのビットが立つか?,   :anybits? ],
           'ビット長'                  => [ :ビット長,                  :bit_length ],
           '切り上げ'                  => [ :切り上げ,                  :ceil ],
           '文字'                      => [ :文字,                      :chr ],
           '強制'                      => [ :強制,                      :coerce ],
           '分母'                      => [ :分母,                      :denominator ],
           '位の数の一覧'              => [ :位の数の一覧,              :digits ],
           '除算'                      => [ :除算,                      :divmod ],
           '降順'                      => [ :降順,                      :downto ],
           '偶数か?'                   => [ :偶数か?,                   :even? ],
           '浮動小数点の除法'          => [ :浮動小数点の除法,          :fdiv ],
           '切り下げ'                  => [ :切り下げ,                  :floor ],
           '最大公約数'                => [ :最大公約数,                :gcd ],
           '最大公約数と最小公倍数'    => [ :最大公約数と最小公倍数,    :gcdlcm ],
           '整数か?'                   => [ :整数か?,                   :integer? ],
           '最小公倍数'                => [ :最小公倍数,                :lcm ],
           '次の値'                    => [ :次の値,                    :next ],
           '一つ後'                    => [ :一つ後,                    :succ ],
           '何れのビットも立たないか?' => [ :何れのビットも立たないか?, :nobits? ],
           '分子'                      => [ :分子,                      :numerator ],
           '奇数か?'                   => [ :奇数か?,                   :odd? ],
           '文字符号値'                => [ :文字符号値,                :ord ],
           '前の値'                    => [ :前の値,                    :pred ],
           '有理化'                    => [ :有理化,                    :rationalize ],
           '余り'                      => [ :余り,                      :remainder ],
           '端数を丸める'              => [ :端数を丸める,              :round ],
           '大きさ'                    => [ :大きさ,                    :size ],
           '回'                        => [ :回,                        :times ],
           '浮動小数点に変換'          => [ :浮動小数点に変換,          :to_f ],
           '整数に変換'                => [ :整数に変換,                :to_i ],
           '有理数に変換'              => [ :有理数に変換,              :to_r ],
           '切り捨て'                  => [ :切り捨て,                  :truncate ],
           '昇順'                      => [ :昇順,                      :upto ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある整数 = 123
        生成物であることを確認(整数, ある整数)
        別名であることを確認(ある整数, 日本語の別名, 元の名前)
        含まれることを確認(整数.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:有理数の操作の試験, 原型: 試験単位::試験事例) {
      資料('商'               => [ :商,               :quo ],
           '絶対値'           => [ :絶対値,           :abs ],
           '絶対的な大きさ'   => [ :絶対的な大きさ,   :magnitude ],
           '切り上げ'         => [ :切り上げ,         :ceil ],
           '強制'             => [ :強制,             :coerce ],
           '分母'             => [ :分母,             :denominator ],
           '浮動小数点の除法' => [ :浮動小数点の除法, :fdiv ],
           '切り下げ'         => [ :切り下げ,         :floor ],
           '負数か?'          => [ :負数か?,          :negative? ],
           '分子'             => [ :分子,             :numerator ],
           '正数か?'          => [ :正数か?,          :positive? ],
           '有理化'           => [ :有理化,           :rationalize ],
           '端数を丸める'     => [ :端数を丸める,     :round ],
           '浮動小数点に変換' => [ :浮動小数点に変換, :to_f ],
           '整数に変換'       => [ :整数に変換,       :to_i ],
           '切り捨て'         => [ :切り捨て,         :truncate ],
           '有理数に変換'     => [ :有理数に変換,     :to_r ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある有理数 = 有理数('1/3')
        生成物であることを確認(有理数, ある有理数)
        別名であることを確認(ある有理数, 日本語の別名, 元の名前)
        含まれることを確認(有理数.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:浮動小数点の操作の試験, 原型: 試験単位::試験事例) {
      資料('剰余'             => [ :剰余,             :modulo ],
           '絶対値'           => [ :絶対値,           :abs ],
           '絶対的な大きさ'   => [ :絶対的な大きさ,   :magnitude ],
           '偏角'             => [ :偏角,             :arg ],
           '角度'             => [ :角度,             :angle ],
           '位相'             => [ :位相,             :phase ],
           '切り上げ'         => [ :切り上げ,         :ceil ],
           '強制'             => [ :強制,             :coerce ],
           '分母'             => [ :分母,             :denominator ],
           '除算'             => [ :除算,             :divmod ],
           '有限か?'          => [ :有限か?,          :finite? ],
           '切り下げ'         => [ :切り下げ,         :floor ],
           '無限か?'          => [ :無限か?,          :infinite? ],
           'NaNか?'           => [ :NaNか?,           :nan? ],
           '負数か?'          => [ :負数か?,          :negative? ],
           '次の浮動小数点'   => [ :次の浮動小数点,   :next_float ],
           '分子'             => [ :分子,             :numerator ],
           '正数か?'          => [ :正数か?,          :positive? ],
           '前の浮動小数点'   => [ :前の浮動小数点,   :prev_float ],
           '有理化'           => [ :有理化,           :rationalize ],
           '端数を丸める'     => [ :端数を丸める,     :round ],
           '浮動小数点に変換' => [ :浮動小数点に変換, :to_f ],
           '整数に変換'       => [ :整数に変換,       :to_i ],
           '切り捨て'         => [ :切り捨て,         :truncate ],
           '有理数に変換'     => [ :有理数に変換,     :to_r ],
           '零か?'            => [ :零か?,            :zero? ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある浮動小数点 = 123.456
        生成物であることを確認(浮動小数点, ある浮動小数点)
        別名であることを確認(ある浮動小数点, 日本語の別名, 元の名前)
        含まれることを確認(浮動小数点.生成物が持つ公開された操作の一覧, 日本語の別名)
      }

      資料('十進桁数'             => [ 浮動小数点::十進桁数,             Float::DIG ],
           'ε'                   => [ 浮動小数点::ε,                   Float::EPSILON ],
           '無限大'               => [ 浮動小数点::無限大,               Float::INFINITY ],
           '仮数部の桁数'         => [ 浮動小数点::仮数部の桁数,         Float::MANT_DIG ],
           '最大値'               => [ 浮動小数点::最大値,               Float::MAX ],
           '指数部の十進の最大値' => [ 浮動小数点::指数部の十進の最大値, Float::MAX_10_EXP ],
           '指数部の最大値'       => [ 浮動小数点::指数部の最大値,       Float::MAX_EXP ],
           '最小値'               => [ 浮動小数点::最小値,               Float::MIN ],
           '指数部の十進の最小値' => [ 浮動小数点::指数部の十進の最小値, Float::MIN_10_EXP ],
           '指数部の最小値'       => [ 浮動小数点::指数部の最小値,       Float::MIN_EXP ],
           '指数表現の基数'       => [ 浮動小数点::指数表現の基数,       Float::RADIX ])
      Warning.ignore(/: warning: constant Float::ROUNDS is deprecated\n\z/)
      資料('丸め規則',               [ 浮動小数点::丸め規則,             Float::ROUNDS ]) if (defined? Float::ROUNDS)
      Warning.clear
      試験('日本語の定数を確認') {|資料|
        日本語の定数の値, 元の定数の値 = 資料
        同一であることを確認(元の定数の値, 日本語の定数の値)
      }
    }

    組(:複素数の操作の試験, 原型: 試験単位::試験事例) {
      資料('極形式'       => [ :極形式,       :polar ],
           '極座標形式'   => [ :極座標形式,   :polar ],
           '直交形式'     => [ :直交形式,     :rect ],
           '直交座標形式' => [ :直交座標形式, :rectangular ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(複素数, 日本語の別名, 元の名前)
        含まれることを確認(複素数.公開された操作の一覧, 日本語の別名)
      }

      資料('商'               => [ :商,               :quo ],
           '絶対値'           => [ :絶対値,           :abs ],
           '絶対的な大きさ'   => [ :絶対的な大きさ,   :magnitude ],
           '絶対値の二乗'     => [ :絶対値の二乗,     :abs2 ],
           '偏角'             => [ :偏角,             :arg ],
           '角度'             => [ :角度,             :angle ],
           '位相'             => [ :位相,             :phase ],
           '強制'             => [ :強制,             :coerce ],
           '共役'             => [ :共役,             :conj ],
           '複素共役'         => [ :複素共役,         :conjugate ],
           '分母'             => [ :分母,             :denominator ],
           '浮動小数点の除法' => [ :浮動小数点の除法, :fdiv ],
           '有限か?'          => [ :有限か?,          :finite? ],
           '虚部'             => [ :虚部,             :imaginary ],
           '無限か?'          => [ :無限か?,          :infinite? ],
           '分子'             => [ :分子,             :numerator ],
           '極形式'           => [ :極形式,           :polar ],
           '極座標形式'       => [ :極座標形式,       :polar ],
           '有理数に変換'     => [ :有理数に変換,     :to_r ],
           '有理化'           => [ :有理化,           :rationalize ],
           '実部'             => [ :実部,             :real ],
           '実数か?'          => [ :実数か?,          :real? ],
           '直交形式'         => [ :直交形式,         :rect ],
           '直交座標形式'     => [ :直交座標形式,     :rectangular ],
           '複素数に変換'     => [ :複素数に変換,     :to_c ],
           '浮動小数点に変換' => [ :浮動小数点に変換, :to_f ],
           '整数に変換'       => [ :整数に変換,       :to_i ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある複素数 = 1 + 1i
        生成物であることを確認(複素数, ある複素数)
        別名であることを確認(ある複素数, 日本語の別名, 元の名前)
        含まれることを確認(複素数.生成物が持つ公開された操作の一覧, 日本語の別名)
      }

      資料('虚数単位' => [ 複素数::虚数単位, Complex::I ])
      試験('日本語の定数を確認') {|資料|
        日本語の定数の値, 元の定数の値 = 資料
        同一であることを確認(元の定数の値, 日本語の定数の値)
      }
    }

    組(:疑似乱数生成器の操作の試験, 原型: 試験単位::試験事例) {
      資料('バイト列'           => [ :バイト列,           :bytes ],
           '乱数の種を作る'     => [ :乱数の種を作る,     :new_seed ],
           '乱数'               => [ :乱数,               :rand ],
           '乱数の種を設定'     => [ :乱数の種を設定,     :srand ],
           '基盤が提供する乱数' => [ :基盤が提供する乱数, :urandom ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(疑似乱数生成器, 日本語の別名, 元の名前)
        含まれることを確認(疑似乱数生成器.公開された操作の一覧, 日本語の別名)
      }

      資料('バイト列' => [ :バイト列, :bytes ],
           '乱数'     => [ :乱数,     :rand ],
           '乱数の種' => [ :乱数の種, :seed ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(疑似乱数生成器.新規, 日本語の別名, 元の名前)
        含まれることを確認(疑似乱数生成器.生成物が持つ公開された操作の一覧, 日本語の別名)
      }

      資料('既定の乱数生成器' => [ 疑似乱数生成器::既定の乱数生成器, Random::DEFAULT ])
      試験('日本語の定数を確認') {|資料|
        日本語の定数の値, 元の定数の値 = 資料
        同一であることを確認(元の定数の値, 日本語の定数の値)
      }
    }

    組(:比較できる物の操作の試験, 原型: 試験単位::試験事例) {
      資料('間に入るか?' => [ :間に入るか?, :between? ],
           '間に収める'  => [ :間に収める,  :clamp ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある比較できる物 = 物.新規
        ある比較できる物.拡張(比較できる)
        一種であることを確認(比較できる, ある比較できる物)
        別名であることを確認(ある比較できる物, 日本語の別名, 元の名前)
        含まれることを確認(比較できる.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:数学の操作の試験, 原型: 試験単位::試験事例) {
      資料('逆余弦関数'                 => [ :逆余弦関数,                 :acos ],
           '逆双曲線余弦関数'           => [ :逆双曲線余弦関数,           :acosh ],
           '逆正弦関数'                 => [ :逆正弦関数,                 :asin ],
           '逆双曲線正弦関数'           => [ :逆双曲線正弦関数,           :asinh ],
           '逆正接関数'                 => [ :逆正接関数,                 :atan ],
           '逆正接関数2'                => [ :逆正接関数2,                :atan2 ],
           '逆双曲線正接関数'           => [ :逆双曲線正接関数,           :atanh ],
           '立方根'                     => [ :立方根,                     :cbrt ],
           '余弦関数'                   => [ :余弦関数,                   :cos ],
           '双曲線余弦関数'             => [ :双曲線余弦関数,             :cosh ],
           '誤差関数'                   => [ :誤差関数,                   :erf ],
           '相補誤差関数'               => [ :相補誤差関数,               :erfc ],
           '指数関数'                   => [ :指数関数,                   :exp ],
           '浮動小数点の仮数部と指数部' => [ :浮動小数点の仮数部と指数部, :frexp ],
           'Γ関数'                     => [ :Γ関数,                     :gamma ],
           '斜辺'                       => [ :斜辺,                       :hypot ],
           '二の冪乗'                   => [ :二の冪乗,                   :ldexp ],
           '対数Γ関数'                 => [ :対数Γ関数,                 :lgamma ],
           '対数'                       => [ :対数,                       :log ],
           '常用対数'                   => [ :常用対数,                   :log10 ],
           '二進対数'                   => [ :二進対数,                   :log2 ],
           '正弦関数'                   => [ :正弦関数,                   :sin ],
           '双曲線正弦関数'             => [ :双曲線正弦関数,             :sinh ],
           '平方根'                     => [ :平方根,                     :sqrt ],
           '正接関数'                   => [ :正接関数,                   :tan ],
           '双曲線正接関数'             => [ :双曲線正接関数,             :tanh ])
      試験('部の関数の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(数学, 日本語の別名, 元の名前)
        含まれることを確認(数学.生成物が持つ秘密の操作の一覧, 日本語の別名)
        含まれることを確認(数学.公開された操作の一覧, 元の名前)
        含まれることを確認(数学.公開された操作の一覧, 日本語の別名)
      }

      資料('自然対数の底' => [ 数学::自然対数の底, Math::E ],
           'ネイピア数'   => [ 数学::ネイピア数,   Math::E ],
           '円周率'       => [ 数学::円周率,       Math::PI ],
           'π'           => [ 数学::π,           Math::PI ])
      試験('日本語の定数を確認') {|資料|
        日本語の定数の値, 元の定数の値 = 資料
        同一であることを確認(元の定数の値, 日本語の定数の値)
      }

      資料('自然対数の底'       => [ :自然対数の底,       Math::E ],
           'ネイピア数'         => [ :ネイピア数,         Math::E ],
           '円周率'             => [ :円周率,             Math::PI ],
           'π'                 => [ :π,                 Math::PI ],
           '定義域外のため失敗' => [ :定義域外のため失敗, Math::DomainError ])
      試験('日本語の定数の付加と付与を確認') {|資料|
        日本語の定数名, 元の定数の値 = 資料

        付加対象の組 = 組.新規
        付加対象の組.付加(数学)
        同一であることを確認(元の定数の値, 付加対象の組.公開された範囲で送信(日本語の定数名))

        付与対象の組 = 組.新規
        付与対象の組.付与(数学)
        同一であることを確認(元の定数の値, 付与対象の組.公開された範囲で送信(日本語の定数名))
      }
    }
  }
}

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
