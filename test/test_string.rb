# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/string'
要求 'japanize/test_unit'

部(日本語化) {
  部(:試験) {
    組(:文字列の操作の試験, 原型: 試験単位::試験事例) {
      資料('可能なら変換' => [ :可能なら変換, :try_convert ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(文字列, 日本語の別名, 元の名前)
        含まれることを確認(文字列.公開された操作の一覧, 日本語の別名)
      }

      資料('連結'                                => [ :連結,                                :concat ],
           '断片'                                => [ :断片,                                :slice ],
           'アスキー文字のみか?'                 => [ :アスキー文字のみか?,                 :ascii_only? ],
           'バイナリ文字列'                      => [ :バイナリ文字列,                      :b ],
           'バイト値の一覧'                      => [ :バイト値の一覧,                      :bytes ],
           'バイト長'                            => [ :バイト長,                            :bytesize ],
           'バイトの断片'                        => [ :バイトの断片,                        :byteslice ],
           '先頭を大文字にする'                  => [ :先頭を大文字にする,                  :capitalize ],
           '先頭を大文字にする!'                 => [ :先頭を大文字にする!,                 :capitalize! ],
           '大文字と小文字を無視して比較する'    => [ :大文字と小文字を無視して比較する,    :casecmp ],
           '大文字と小文字を無視して一致するか?' => [ :大文字と小文字を無視して一致するか?, :casecmp? ],
           '中央寄せ'                            => [ :中央寄せ,                            :center ],
           '文字の一覧'                          => [ :文字の一覧,                          :chars ],
           '末尾を食べる'                        => [ :末尾を食べる,                        :chomp ],
           '末尾を食べる!'                       => [ :末尾を食べる!,                       :chomp! ],
           '末尾を切り落す'                      => [ :末尾を切り落す,                      :chop ],
           '末尾を切り落す!'                     => [ :末尾を切り落す!,                     :chop! ],
           '文字'                                => [ :文字,                                :chr ],
           '消去する'                            => [ :消去する,                            :clear ],
           '符号点の一覧'                        => [ :符号点の一覧,                        :codepoints ],
           '数える'                              => [ :数える,                              :count ],
           '暗号化'                              => [ :暗号化,                              :crypt ],
           '削除'                                => [ :削除,                                :delete ],
           '削除!'                               => [ :削除!,                               :delete! ],
           '接頭辞を削除'                        => [ :接頭辞を削除,                        :delete_prefix ],
           '接頭辞を削除!'                       => [ :接頭辞を削除!,                       :delete_prefix! ],
           '接尾辞を削除'                        => [ :接尾辞を削除,                        :delete_suffix ],
           '接尾辞を削除!'                       => [ :接尾辞を削除!,                       :delete_suffix! ],
           '小文字にする'                        => [ :小文字にする,                        :downcase ],
           '小文字にする!'                       => [ :小文字にする!,                       :downcase! ],
           '特殊文字を可視化する'                => [ :特殊文字を可視化する,                :dump ],
           'バイト値毎に'                        => [ :バイト値毎に,                        :each_byte ],
           '文字毎に'                            => [ :文字毎に,                            :each_char ],
           '符号点毎に'                          => [ :符号点毎に,                          :each_codepoint ],
           '書記素クラスタ毎に'                  => [ :書記素クラスタ毎に,                  :each_grapheme_cluster ],
           '行毎に'                              => [ :行毎に,                              :each_line ],
           '空か?'                               => [ :空か?,                               :empty? ],
           '文字符号化方式を変換'                => [ :文字符号化方式を変換,                :encode ],
           '文字符号化方式を変換!'               => [ :文字符号化方式を変換!,               :encode! ],
           '文字符号化方式'                      => [ :文字符号化方式,                      :encoding ],
           '末尾が一致するか?'                   => [ :末尾が一致するか?,                   :end_with? ],
           '文字符号化方式を強制する'            => [ :文字符号化方式を強制する,            :force_encoding ],
           'バイト値を取得'                      => [ :バイト値を取得,                      :getbyte ],
           '書記素クラスタの一覧'                => [ :書記素クラスタの一覧,                :grapheme_clusters ],
           '全置換'                              => [ :全置換,                              :gsub ],
           '全置換!'                             => [ :全置換!,                             :gsub! ],
           '十六進数'                            => [ :十六進数,                            :hex ],
           '含むか?'                             => [ :含むか?,                             :include? ],
           '位置を取得'                          => [ :位置を取得,                          :index ],
           '挿入'                                => [ :挿入,                                :insert ],
           '記号化'                              => [ :記号化,                              :intern ],
           '記号に変換'                          => [ :記号に変換,                          :to_sym ],
           '長さ'                                => [ :長さ,                                :length ],
           '大きさ'                              => [ :大きさ,                              :size ],
           '行の一覧'                            => [ :行の一覧,                            :lines ],
           '左寄せ'                              => [ :左寄せ,                              :ljust ],
           '左側の空白を削る'                    => [ :左側の空白を削る,                    :lstrip ],
           '左側の空白を削る!'                   => [ :左側の空白を削る!,                   :lstrip! ],
           '一致'                                => [ :一致,                                :match ],
           '一致するか?'                         => [ :一致するか?,                         :match? ],
           '一つ後'                              => [ :一つ後,                              :succ ],
           '次の値'                              => [ :次の値,                              :next ],
           '一つ後!'                             => [ :一つ後!,                             :succ! ],
           '次の値!'                             => [ :次の値!,                             :next! ],
           '八進数'                              => [ :八進数,                              :oct ],
           '文字符号値'                          => [ :文字符号値,                          :ord ],
           '分ける'                              => [ :分ける,                              :partition ],
           '先頭に連結'                          => [ :先頭に連結,                          :prepend ],
           '取り替える'                          => [ :取り替える,                          :replace ],
           '逆順'                                => [ :逆順,                                :reverse ],
           '逆順!'                               => [ :逆順!,                               :reverse! ],
           '逆順で位置を取得'                    => [ :逆順で位置を取得,                    :rindex ],
           '右寄せ'                              => [ :右寄せ,                              :rjust ],
           '末尾から分ける'                      => [ :末尾から分ける,                      :rpartition ],
           '右側の空白を削る'                    => [ :右側の空白を削る,                    :rstrip ],
           '右側の空白を削る!'                   => [ :右側の空白を削る!,                   :rstrip! ],
           '走査'                                => [ :走査,                                :scan ],
           '不正なバイト列を置換'                => [ :不正なバイト列を置換,                :scrub ],
           '不正なバイト列を置換!'               => [ :不正なバイト列を置換!,               :scrub! ],
           'バイト値を設定'                      => [ :バイト値を設定,                      :setbyte ],
           '断片!'                               => [ :断片!,                               :slice! ],
           '分割'                                => [ :分割,                                :split ],
           '縮合'                                => [ :縮合,                                :squeeze ],
           '縮合!'                               => [ :縮合!,                               :squeeze! ],
           '先頭が一致するか?'                   => [ :先頭が一致するか?,                   :start_with? ],
           '空白を削る'                          => [ :空白を削る,                          :strip ],
           '空白を削る!'                         => [ :空白を削る!,                         :strip! ],
           '置換'                                => [ :置換,                                :sub ],
           '置換!'                               => [ :置換!,                               :sub! ],
           '検査合計'                            => [ :検査合計,                            :sum ],
           '大文字と小文字を逆転させる'          => [ :大文字と小文字を逆転させる,          :swapcase ],
           '大文字と小文字を逆転させる!'         => [ :大文字と小文字を逆転させる!,         :swapcase! ],
           '複素数に変換'                        => [ :複素数に変換,                        :to_c ],
           '浮動小数点に変換'                    => [ :浮動小数点に変換,                    :to_f ],
           '整数に変換'                          => [ :整数に変換,                          :to_i ],
           '有理数に変換'                        => [ :有理数に変換,                        :to_r ],
           '文字を置換'                          => [ :文字を置換,                          :tr ],
           '文字を置換!'                         => [ :文字を置換!,                         :tr! ],
           '文字を置換して縮合'                  => [ :文字を置換して縮合,                  :tr_s ],
           '文字を置換して縮合!'                 => [ :文字を置換して縮合!,                 :tr_s! ],
           '特殊文字を不可視化する'              => [ :特殊文字を不可視化する,              :undump ],
           'ユニコードを正規化する'              => [ :ユニコードを正規化する,              :unicode_normalize ],
           'ユニコードを正規化する!'             => [ :ユニコードを正規化する!,             :unicode_normalize! ],
           'ユニコードが正規化されているか?'     => [ :ユニコードが正規化されているか?,     :unicode_normalized? ],
           '情報を開梱'                          => [ :情報を開梱,                          :unpack ],
           '一個の情報を開梱'                    => [ :一個の情報を開梱,                    :unpack1 ],
           '大文字にする'                        => [ :大文字にする,                        :upcase ],
           '大文字にする!'                       => [ :大文字にする!,                       :upcase! ],
           '昇順'                                => [ :昇順,                                :upto ],
           '文字符号化方式が妥当か?'             => [ :文字符号化方式が妥当か?,             :valid_encoding? ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(文字列.新規, 日本語の別名, 元の名前)
        含まれることを確認(文字列.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:記号の操作の試験, 原型: 試験単位::試験事例) {
      資料('全ての記号の一覧' => [ :全ての記号の一覧, :all_symbols ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(記号, 日本語の別名, 元の名前)
        含まれることを確認(記号.公開された操作の一覧, 日本語の別名)
      }

      資料('断片'                                => [ :断片,                                :slice ],
           '先頭を大文字にする'                  => [ :先頭を大文字にする,                  :capitalize ],
           '大文字と小文字を無視して比較する'    => [ :大文字と小文字を無視して比較する,    :casecmp ],
           '大文字と小文字を無視して一致するか?' => [ :大文字と小文字を無視して一致するか?, :casecmp? ],
           '小文字にする'                        => [ :小文字にする,                        :downcase ],
           '空か?'                               => [ :空か?,                               :empty? ],
           '文字符号化方式'                      => [ :文字符号化方式,                      :encoding ])
      資料('末尾が一致するか?'                   => [ :末尾が一致するか?,                   :end_with? ]) if (記号.公開された操作は定義済みか? :end_with?, 偽値)
      資料('識別番号を名前に変換'                => [ :識別番号を名前に変換,                :id2name ],
           '記号化'                              => [ :記号化,                              :intern ],
           '記号に変換'                          => [ :記号に変換,                          :to_sym ],
           '長さ'                                => [ :長さ,                                :length ],
           '大きさ'                              => [ :大きさ,                              :size ])
      資料('先頭が一致するか?'                   => [ :先頭が一致するか?,                   :start_with? ]) if (記号.公開された操作は定義済みか? :start_with?, 偽値)
      資料('一致'                                => [ :一致,                                :match ],
           '一致するか?'                         => [ :一致するか?,                         :match? ],
           '一つ後'                              => [ :一つ後,                              :succ ],
           '次の値'                              => [ :次の値,                              :next ],
           '大文字と小文字を逆転させる'          => [ :大文字と小文字を逆転させる,          :swapcase ],
           '手続きに変換'                        => [ :手続きに変換,                        :to_proc ],
           '大文字にする'                        => [ :大文字にする,                        :upcase ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある記号 = :甲
        生成物であることを確認(記号, ある記号)
        別名であることを確認(ある記号, 日本語の別名, 元の名前)
        含まれることを確認(記号.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:文字符号化方式の操作の試験, 原型: 試験単位::試験事例) {
      資料('別名の一覧'                     => [ :別名の一覧,                     :aliases ],
           '互換性はあるか?'                => [ :互換性はあるか?,                :compatible? ],
           '既定の外部文字符号化方式'       => [ :既定の外部文字符号化方式,       :default_external ],
           '既定の外部文字符号化方式='      => [ :既定の外部文字符号化方式=,      :default_external= ],
           '既定の内部文字符号化方式'       => [ :既定の内部文字符号化方式,       :default_internal ],
           '既定の内部文字符号化方式='      => [ :既定の内部文字符号化方式=,      :default_internal= ],
           '見つける'                       => [ :見つける,                       :find ],
           '一覧'                           => [ :一覧,                           :list ],
           'ロケールの文字集合記述ファイル' => [ :ロケールの文字集合記述ファイル, :locale_charmap ],
           '名前の一覧'                     => [ :名前の一覧,                     :name_list ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(文字符号化方式, 日本語の別名, 元の名前)
        含まれることを確認(文字符号化方式.公開された操作の一覧, 日本語の別名)
      }

      資料('アスキー互換か?' => [ :アスキー互換か?, :ascii_compatible? ],
           '見せかけか?'     => [ :見せかけか?,     :dummy? ],
           '名前'            => [ :名前,            :name ],
           '名前の一覧'      => [ :名前の一覧,      :names ],
           '写し取る'        => [ :写し取る,        :replicate ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(文字符号化方式.一覧[0], 日本語の別名, 元の名前)
        含まれることを確認(文字符号化方式.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:文字符号化方式_変換器の操作の試験, 原型: 試験単位::試験事例) {
      資料('アスキー互換の文字符号化方式' => [ :アスキー互換の文字符号化方式, :asciicompat_encoding ],
           '変換の経路を探索する'         => [ :変換の経路を探索する,         :search_convpath ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(文字符号化方式::変換器, 日本語の別名, 元の名前)
        含まれることを確認(文字符号化方式::変換器.公開された操作の一覧, 日本語の別名)
      }

      資料('変換する'               => [ :変換する,               :convert ],
           '変換の経路'             => [ :変換の経路,             :convpath ],
           '変換先の文字符号化方式' => [ :変換先の文字符号化方式, :destination_encoding ],
           '終了する'               => [ :終了する,               :finish ],
           '出力結果に挿入する'     => [ :出力結果に挿入する,     :insert_output ],
           '最後の失敗'             => [ :最後の失敗,             :last_error ],
           '低水準の変換'           => [ :低水準の変換,           :primitive_convert ],
           '低水準の失敗情報'       => [ :低水準の失敗情報,       :primitive_errinfo ],
           '元に返す'               => [ :元に返す,               :putback ],
           '置換文字'               => [ :置換文字,               :replacement ],
           '置換文字='              => [ :置換文字=,              :replacement= ],
           '変換元の文字符号化方式' => [ :変換元の文字符号化方式, :source_encoding ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(文字符号化方式::変換器.新規(文字符号化方式::US_ASCII, 文字符号化方式::UTF_8), 日本語の別名, 元の名前)
        含まれることを確認(文字符号化方式::変換器.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:正規表現の操作の試験, 原型: 試験単位::試験事例) {
      資料('翻訳'               => [ :翻訳,               :compile ],
           '特殊文字を無効化'   => [ :特殊文字を無効化,   :escape ],
           '引用'               => [ :引用,               :quote ],
           '最後に一致した結果' => [ :最後に一致した結果, :last_match ],
           '可能なら変換'       => [ :可能なら変換,       :try_convert ],
           '和集合'             => [ :和集合,             :union ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(正規表現, 日本語の別名, 元の名前)
        含まれることを確認(正規表現.公開された操作の一覧, 日本語の別名)
      }

      資料('大文字と小文字を無視するか?'       => [ :大文字と小文字を無視するか?,       :casefold? ],
           '文字符号化方式'                    => [ :文字符号化方式,                    :encoding ],
           '文字符号化方式が限定されているか?' => [ :文字符号化方式が限定されているか?, :fixed_encoding? ],
           '一致'                              => [ :一致,                              :match ],
           '一致するか?'                       => [ :一致するか?,                       :match? ],
           '名前付き捕捉対象の一覧'            => [ :名前付き捕捉対象の一覧,            :named_captures ],
           '名前の一覧'                        => [ :名前の一覧,                        :names ],
           '選択肢の一覧'                      => [ :選択肢の一覧,                      :options ],
           '元の文字列'                        => [ :元の文字列,                        :source ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(正規表現.新規(''), 日本語の別名, 元の名前)
        含まれることを確認(正規表現.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:正規表現が一致した結果の操作の試験, 原型: 試験単位::試験事例) {
      資料('開始する位置'           => [ :開始する位置,           :begin ],
           '捕捉対象の一覧'         => [ :捕捉対象の一覧,         :captures ],
           '終了する位置'           => [ :終了する位置,           :end ],
           '長さ'                   => [ :長さ,                   :length ],
           '大きさ'                 => [ :大きさ,                 :size ],
           '名前付き捕捉対象の一覧' => [ :名前付き捕捉対象の一覧, :named_captures ],
           '名前の一覧'             => [ :名前の一覧,             :names ],
           '開始と終了の位置'       => [ :開始と終了の位置,       :offset ],
           '後続する文字列'         => [ :後続する文字列,         :post_match ],
           '先行する文字列'         => [ :先行する文字列,         :pre_match ],
           '一致した正規表現'       => [ :一致した正規表現,       :regexp ],
           '対象の文字列'           => [ :対象の文字列,           :string ],
           '配列に変換'             => [ :配列に変換,             :to_a ],
           '位置で値の一覧を取得'   => [ :位置で値の一覧を取得,   :values_at ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        '甲' =~ /甲/
        ある正規表現が一致した結果 = 正規表現.最後に一致した結果
        生成物であることを確認(正規表現が一致した結果, ある正規表現が一致した結果)
        別名であることを確認(ある正規表現が一致した結果, 日本語の別名, 元の名前)
        含まれることを確認(正規表現が一致した結果.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }
  }
}

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
