# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/globals'
要求 'japanize/test_unit'

部(日本語化) {
  部(:試験) {
    組(:配置対象の探索経路の試験, 原型: 試験単位::試験事例) {
      資料('機能への経路を解決する' => [ :機能への経路を解決する, :resolve_feature_path ]) if ($配置対象の探索経路.特異組.公開された操作は定義済みか? :resolve_feature_path, 偽値)
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認($配置対象の探索経路, 日本語の別名, 元の名前)
        含まれることを確認($配置対象の探索経路.公開された操作の一覧, 日本語の別名)
      }
    }

    組(:スクリプトの入力の操作の試験, 原型: 試験単位::試験事例) {
      資料('スクリプトの引数'         => [ :スクリプトの引数,         :argv ],
           'バイナリ形式'             => [ :バイナリ形式,             :binmode ],
           'バイナリ形式か?'          => [ :バイナリ形式か?,          :binmode? ],
           '閉じる'                   => [ :閉じる,                   :close ],
           '閉じたか?'                => [ :閉じたか?,                :closed? ],
           '個別に'                   => [ :個別に,                   :each ],
           '行毎に'                   => [ :行毎に,                   :each_line ],
           'バイト値毎に'             => [ :バイト値毎に,             :each_byte ],
           '文字毎に'                 => [ :文字毎に,                 :each_char ],
           '符号点毎に'               => [ :符号点毎に,               :each_codepoint ],
           '終端'                     => [ :終端,                     :eof ],
           '終端か?'                  => [ :終端か?,                  :eof? ],
           '外部文字符号化方式'       => [ :外部文字符号化方式,       :external_encoding ],
           'ファイル'                 => [ :ファイル,                 :file ],
           'ファイル名'               => [ :ファイル名,               :filename ],
           'ファイルへの経路'         => [ :ファイルへの経路,         :path ],
           'ファイル記述子'           => [ :ファイル記述子,           :fileno ],
           '整数に変換'               => [ :整数に変換,               :to_i ],
           'バイト値を取得'           => [ :バイト値を取得,           :getbyte ],
           '文字を取得'               => [ :文字を取得,               :getc ],
           '行を取得'                 => [ :行を取得,                 :gets ],
           '書き換えの形式'           => [ :書き換えの形式,           :inplace_mode ],
           '書き換えの形式='          => [ :書き換えの形式=,          :inplace_mode= ],
           '内部文字符号化方式'       => [ :内部文字符号化方式,       :internal_encoding ],
           '行番号'                   => [ :行番号,                   :lineno ],
           '行番号='                  => [ :行番号=,                  :lineno= ],
           '位置を告げよ'             => [ :位置を告げよ,             :tell ],
           '位置'                     => [ :位置,                     :pos ],
           '位置='                    => [ :位置=,                    :pos= ],
           '印字'                     => [ :印字,                     :print ],
           '整形して印字'             => [ :整形して印字,             :printf ],
           '文字を出力'               => [ :文字を出力,               :putc ],
           '行を出力'                 => [ :行を出力,                 :puts ],
           '読む'                     => [ :読む,                     :read ],
           '遮られずに読む'           => [ :遮られずに読む,           :read_nonblock ],
           'バイト値を読む'           => [ :バイト値を読む,           :readbyte ],
           '文字を読む'               => [ :文字を読む,               :readchar ],
           '行を読む'                 => [ :行を読む,                 :readline ],
           '全行を読む'               => [ :全行を読む,               :readlines ],
           '配列に変換'               => [ :配列に変換,               :to_a ],
           '準備された分だけ読む'     => [ :準備された分だけ読む,     :readpartial ],
           '巻き戻す'                 => [ :巻き戻す,                 :rewind ],
           '移動'                     => [ :移動,                     :seek ],
           '文字符号化方式を設定'     => [ :文字符号化方式を設定,     :set_encoding ],
           '次のファイルに進む'       => [ :次のファイルに進む,       :skip ],
           '入出力に変換'             => [ :入出力に変換,             :to_io ],
           '書き込み用の入出力に変換' => [ :書き込み用の入出力に変換, :to_write_io ],
           '書く'                     => [ :書く,                     :write ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(スクリプトの入力, 日本語の別名, 元の名前)
        含まれることを確認(スクリプトの入力.公開された操作の一覧, 日本語の別名)
      }
    }

    組(:環境変数の入力の操作の試験, 原型: 試験単位::試験事例) {
      資料('格納'                   => [ :格納,                   :store ],
           '連想取得'               => [ :連想取得,               :assoc ],
           '消去する'               => [ :消去する,               :clear ],
           '削除'                   => [ :削除,                   :delete ],
           '条件で削除'             => [ :条件で削除,             :delete_if ],
           '除く!'                  => [ :除く!,                  :reject! ],
           '個別に'                 => [ :個別に,                 :each ],
           '対毎に'                 => [ :対毎に,                 :each_pair ],
           'キー毎に'               => [ :キー毎に,               :each_key ],
           '値毎に'                 => [ :値毎に,                 :each_value ],
           '空か?'                  => [ :空か?,                  :empty? ],
           '取得'                   => [ :取得,                   :fetch ],
           '選択する'               => [ :選択する,               :select ],
           '抽出する'               => [ :抽出する,               :filter ],
           '条件で残す'             => [ :条件で残す,             :keep_if ],
           '選択する!'              => [ :選択する!,              :select! ],
           '抽出する!'              => [ :抽出する!,              :filter! ],
           'キーを持つか?'          => [ :キーを持つか?,          :has_key? ],
           '含むか?'                => [ :含むか?,                :include? ],
           'キーか?'                => [ :キーか?,                :key? ],
           '一員か?'                => [ :一員か?,                :member? ])
      資料('併合!'                  => [ :併合!,                  :merge! ]) if (環境変数.特異組.公開された操作は定義済みか? :merge!, 偽値)
      資料('値を持つか?'            => [ :値を持つか?,            :has_value? ],
           '値か?'                  => [ :値か?,                  :value? ],
           'キーを取得'             => [ :キーを取得,             :key ],
           '位置を取得'             => [ :位置を取得,             :index ],
           '反転させる'             => [ :反転させる,             :invert ],
           'キーの一覧'             => [ :キーの一覧,             :keys ],
           '長さ'                   => [ :長さ,                   :length ],
           '大きさ'                 => [ :大きさ,                 :size ],
           '逆連想取得'             => [ :逆連想取得,             :rassoc ],
           'ハッシュ値を再計算する' => [ :ハッシュ値を再計算する, :rehash ],
           '除く'                   => [ :除く,                   :reject ],
           '取り替える'             => [ :取り替える,             :replace ],
           '先頭から取り出す'       => [ :先頭から取り出す,       :shift ],
           '断片'                   => [ :断片,                   :slice ],
           '配列に変換'             => [ :配列に変換,             :to_a ],
           '連想配列に変換'         => [ :連想配列に変換,         :to_h ],
           '更新'                   => [ :更新,                   :update ],
           '値の一覧'               => [ :値の一覧,               :values ],
           '位置で値の一覧を取得'   => [ :位置で値の一覧を取得,   :values_at ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(環境変数, 日本語の別名, 元の名前)
        含まれることを確認(環境変数.公開された操作の一覧, 日本語の別名)
      }
    }
  }
}

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
