# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/sys'
要求 'japanize/test_unit'

部(日本語化) {
  部(:試験) {
    組(:束縛の操作の試験, 原型: 試験単位::試験事例) {
      資料('評価'                  => [ :評価,                  :eval ],
           '対話操作を開始'        => [ :対話操作を開始,        :irb ],
           '局所変数は定義済みか?' => [ :局所変数は定義済みか?, :local_variable_defined? ],
           '局所変数を取得'        => [ :局所変数を取得,        :local_variable_get ],
           '局所変数を設定'        => [ :局所変数を設定,        :local_variable_set ],
           '局所変数の一覧'        => [ :局所変数の一覧,        :local_variables ],
           '受信先'                => [ :受信先,                :receiver ],
           '元の場所'              => [ :元の場所,              :source_location ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある束縛 = 束縛を取得
        生成物であることを確認(束縛, ある束縛)
        別名であることを確認(ある束縛, 日本語の別名, 元の名前)
        含まれることを確認(束縛.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:手続き型の操作の試験, 原型: 試験単位::試験事例) {
      資料('呼ぶ'       => [ :呼ぶ,       :call ],
           '委ねる'     => [ :委ねる,     :yield ],
           '項数'       => [ :項数,       :arity ],
           '束縛を取得' => [ :束縛を取得, :binding ],
           'カリー化'   => [ :カリー化,   :curry ],
           'λか?'      => [ :λか?,      :lambda? ],
           '引数の一覧' => [ :引数の一覧, :parameters ],
           '元の場所'   => [ :元の場所,   :source_location ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(手続き型.新規{}, 日本語の別名, 元の名前)
        含まれることを確認(手続き型.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:操作の操作の試験, 原型: 試験単位::試験事例) {
      資料('呼ぶ'               => [ :呼ぶ,               :call ],
           '項数'               => [ :項数,               :arity ],
           'カリー化'           => [ :カリー化,           :curry ],
           '名前'               => [ :名前,               :name ],
           '元の名前'           => [ :元の名前,           :original_name ],
           '所属'               => [ :所属,               :owner ],
           '引数の一覧'         => [ :引数の一覧,         :parameters ],
           '受信先'             => [ :受信先,             :receiver ],
           '元の場所'           => [ :元の場所,           :source_location ],
           '原型の操作'         => [ :原型の操作,         :super_method ],
           '未束縛の操作を取得' => [ :未束縛の操作を取得, :unbind ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある操作 = 操作を取得(__操作名__)
        生成物であることを確認(操作, ある操作)
        別名であることを確認(ある操作, 日本語の別名, 元の名前)
        含まれることを確認(操作.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:未束縛の操作の操作の試験, 原型: 試験単位::試験事例) {
      資料('項数'       => [ :項数,       :arity ],
           '束縛'       => [ :束縛,       :bind ],
           '名前'       => [ :名前,       :name ],
           '元の名前'   => [ :元の名前,   :original_name ],
           '所属'       => [ :所属,       :owner ],
           '引数の一覧' => [ :引数の一覧, :parameters ],
           '元の場所'   => [ :元の場所,   :source_location ],
           '原型の操作' => [ :原型の操作, :super_method ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        ある未束縛の操作 = 生成元.生成物が持つ操作を取得(__操作名__)
        生成物であることを確認(未束縛の操作, ある未束縛の操作)
        別名であることを確認(ある未束縛の操作, 日本語の別名, 元の名前)
        含まれることを確認(未束縛の操作.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:物の空間の操作の試験, 原型: 試験単位::試験事例) {
      資料('_識別番号から参照を取得' => [ :_識別番号から参照を取得, :_id2ref ],
           '物を数える'              => [ :物を数える,              :count_objects ],
           '最終処理を定義'          => [ :最終処理を定義,          :define_finalizer ],
           '物毎に'                  => [ :物毎に,                  :each_object ],
           'ゴミを集める'            => [ :ゴミを集める,            :garbage_collect ],
           '最終処理を解除'          => [ :最終処理を解除,          :undefine_finalizer ])
      試験('部の関数の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(物の空間, 日本語の別名, 元の名前)
        含まれることを確認(物の空間.生成物が持つ秘密の操作の一覧, 日本語の別名)
        含まれることを確認(物の空間.公開された操作の一覧, 元の名前)
        含まれることを確認(物の空間.公開された操作の一覧, 日本語の別名)
      }
    }

    組(:物の空間_弱参照の連想配列の操作の試験, 原型: 試験単位::試験事例) {
      資料('大きさ'     => [ :大きさ,     :size ],
           '長さ'       => [ :長さ,       :length ],
           'キーの一覧' => [ :キーの一覧, :keys ],
           '値の一覧'   => [ :値の一覧,   :values ],
           'キーか?'    => [ :キーか?,    :key? ],
           '含むか?'    => [ :含むか?,    :include? ],
           '一員か?'    => [ :一員か?,    :member? ],
           '個別に'     => [ :個別に,     :each ],
           'キー毎に'   => [ :キー毎に,   :each_key ],
           '値毎に'     => [ :値毎に,     :each_value ],
           '対毎に'     => [ :対毎に,     :each_pair ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(物の空間::弱参照の連想配列.新規, 日本語の別名, 元の名前)
        含まれることを確認(物の空間::弱参照の連想配列.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:発生事象の追跡の操作の試験, 原型: 試験単位::試験事例) {
      資料('状態を取得' => [ :状態を取得, :stat ],
           '追跡'       => [ :追跡,       :trace ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(発生事象の追跡, 日本語の別名, 元の名前)
        含まれることを確認(発生事象の追跡.公開された操作の一覧, 日本語の別名)
      }

      資料('束縛を取得'           => [ :束縛を取得,           :binding ],
           '呼び出し先の識別子'   => [ :呼び出し先の識別子,   :callee_id ],
           '定義されている組'     => [ :定義されている組,     :defined_class ],
           '無効にする'           => [ :無効にする,           :disable ],
           '有効にする'           => [ :有効にする,           :enable ],
           '有効か?'              => [ :有効か?,              :enabled? ],
           'スクリプトを評価する' => [ :スクリプトを評価する, :eval_script ],
           '事象'                 => [ :事象,                 :event ],
           '命令の連なり'         => [ :命令の連なり,         :instruction_sequence ],
           '行番号'               => [ :行番号,               :lineno ],
           '操作の識別子'         => [ :操作の識別子,         :method_id ],
           '引数の一覧'           => [ :引数の一覧,           :parameters ],
           'ファイルへの経路'     => [ :ファイルへの経路,     :path ],
           '発生した例外'         => [ :発生した例外,         :raised_exception ],
           '戻り値'               => [ :戻り値,               :return_value ],
           '参照を取得'           => [ :参照を取得,           :self ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(発生事象の追跡.新規{}, 日本語の別名, 元の名前)
        含まれることを確認(発生事象の追跡.生成物が持つ公開された操作の一覧, 日本語の別名)
      }
    }

    組(:ゴミ集めの操作の試験, 原型: 試験単位::試験事例) {
      資料('実行した回数'                               => [ :実行した回数,                               :count ],
           '無効にする'                                 => [ :無効にする,                                 :disable ],
           '有効にする'                                 => [ :有効にする,                                 :enable ],
           '最新のゴミ集めの情報'                       => [ :最新のゴミ集めの情報,                       :latest_gc_info ],
           '開始'                                       => [ :開始,                                       :start ],
           '統計情報を取得'                             => [ :統計情報を取得,                             :stat ],
           '頻繁に実施'                                 => [ :頻繁に実施,                                 :stress ],
           '頻繁に実施='                                => [ :頻繁に実施=,                                :stress= ],
           '内部の一貫性を検証する'                     => [ :内部の一貫性を検証する,                     :verify_internal_consistency ],
           '一時的なヒープ領域の内部の一貫性を検証する' => [ :一時的なヒープ領域の内部の一貫性を検証する, :verify_transient_heap_internal_consistency ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(ゴミ集め, 日本語の別名, 元の名前)
        含まれることを確認(ゴミ集め.公開された操作の一覧, 日本語の別名)
      }

      資料('ゴミを集める' => [ :ゴミを集める, :garbage_collect ])
      試験('公開された操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        あるゴミ集めできる物 = 物.新規
        あるゴミ集めできる物.拡張(ゴミ集め)
        一種であることを確認(ゴミ集め, あるゴミ集めできる物)
        別名であることを確認(あるゴミ集めできる物, 日本語の別名, 元の名前)
        含まれることを確認(ゴミ集め.生成物が持つ公開された操作の一覧, 日本語の別名)
      }

      資料('内部の定数の一覧'   => [ ゴミ集め::内部の定数の一覧,   GC::INTERNAL_CONSTANTS ],
           '既定の選択肢の一覧' => [ ゴミ集め::既定の選択肢の一覧, GC::OPTS ])
      試験('日本語の定数を確認') {|資料|
        日本語の定数の値, 元の定数の値 = 資料
        同一であることを確認(元の定数の値, 日本語の定数の値)
      }

      資料('内部の定数の一覧'       => [ :内部の定数の一覧,   GC::INTERNAL_CONSTANTS ],
           '指定済みの選択肢の一覧' => [ :既定の選択肢の一覧, GC::OPTS ],
           '統計情報'               => [ :統計情報,           GC::Profiler ])
      試験('日本語の定数の付加と付与を確認') {|資料|
        日本語の定数名, 元の定数の値 = 資料

        付加対象の組 = 組.新規
        付加対象の組.付加(ゴミ集め)
        同一であることを確認(元の定数の値, 付加対象の組.公開された範囲で送信(日本語の定数名))

        付与対象の組 = 組.新規
        付与対象の組.付与(ゴミ集め)
        同一であることを確認(元の定数の値, 付与対象の組.公開された範囲で送信(日本語の定数名))
      }
    }

    組(:ゴミ集め_統計情報の操作の試験, 原型: 試験単位::試験事例) {
      資料('消去する'     => [ :消去する,     :clear ],
           '無効にする'   => [ :無効にする,   :disable ],
           '有効にする'   => [ :有効にする,   :enable ],
           '有効か?'      => [ :有効か?,      :enabled? ],
           '集計前の情報' => [ :集計前の情報, :raw_data ],
           '報告する'     => [ :報告する,     :report ],
           '結果'         => [ :結果,         :result ],
           '総計時間'     => [ :総計時間,     :total_time ])
      試験('特異操作の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(ゴミ集め::統計情報, 日本語の別名, 元の名前)
        含まれることを確認(ゴミ集め::統計情報.公開された操作の一覧, 日本語の別名)
      }
    }

    組(:直列化の操作の試験, 原型: 試験単位::試験事例) {
      資料('書き出す' => [ :書き出す, :dump ],
           '読み込む' => [ :読み込む, :load ],
           '復元する' => [ :復元する, :restore ])
      試験('部の関数の日本語の別名を確認') {|資料|
        日本語の別名, 元の名前 = 資料
        別名であることを確認(直列化, 日本語の別名, 元の名前)
        含まれることを確認(直列化.生成物が持つ秘密の操作の一覧, 日本語の別名)
        含まれることを確認(直列化.公開された操作の一覧, 元の名前)
        含まれることを確認(直列化.公開された操作の一覧, 日本語の別名)
      }

      資料('主改訂版数' => [ 直列化::主改訂版数, Marshal::MAJOR_VERSION ],
           '副改訂版数' => [ 直列化::副改訂版数, Marshal::MINOR_VERSION])
      試験('日本語の定数を確認') {|資料|
        日本語の定数の値, 元の定数の値 = 資料
        同一であることを確認(元の定数の値, 日本語の定数の値)
      }

      資料('主改訂版数' => [ :主改訂版数, Marshal::MAJOR_VERSION ],
           '副改訂版数' => [ :副改訂版数, Marshal::MINOR_VERSION])
      試験('日本語の定数の付加と付与を確認') {|資料|
        日本語の定数名, 元の定数の値 = 資料

        付加対象の組 = 組.新規
        付加対象の組.付加(直列化)
        同一であることを確認(元の定数の値, 付加対象の組.公開された範囲で送信(日本語の定数名))

        付与対象の組 = 組.新規
        付与対象の組.付与(直列化)
        同一であることを確認(元の定数の値, 付与対象の組.公開された範囲で送信(日本語の定数名))
      }
    }

    組(:警告の出力の操作の試験, 原型: 試験単位::試験事例) {
      試験('警告の出力を切り替える確認') {
        警告を出力する元の操作 = 警告の出力.特異組.生成物が持つ操作を取得(:警告を出力する)
        begin
          出力先 = ''
          警告の出力.特異操作の定義(:警告を出力する) {|文言|
            出力先 << 文言
          }

          警告('甲')
          等しいことを確認("甲\n", 出力先)
        ensure
          警告の出力.特異組.定義(:警告を出力する, 警告を出力する元の操作)
        end
      }
    }
  }
}

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
