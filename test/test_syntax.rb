# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/syntax'
要求 'japanize/test_unit'

部(日本語化) {
  部(:試験) {
    組(:制御命令の試験, 原型: 試験単位::試験事例) {
      試験('繰り返し命令の確認') {
        ある配列 = %w[ 甲 乙 丙 ]

        回数 = 0
        返り値 = 繰り返す(ある配列) {|項目|
          回数 += 1
          case (回数)
          when 1
            等しいことを確認('甲', 項目)
          when 2
            等しいことを確認('乙', 項目)
          when 3
            等しいことを確認('丙', 項目)
          else
            失敗させる
          end
        }
        等しいことを確認(ある配列, 返り値)
      }

      資料('条件が真' => [ 真値, [ :条件節, :肯定節 ], :甲 ],
           '条件が偽' => [ 偽値, [ :条件節, :否定節 ], :乙 ])
      試験('肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.であるなら{
          呼び出し履歴 << :肯定節
          :甲
        }.でなければ{
          呼び出し履歴 << :否定節
          :乙
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が偽' => [ 偽値, [ :条件節, :否定節 ], :甲 ],
           '条件が真' => [ 真値, [ :条件節, :肯定節 ], :乙 ])
      試験('逆肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.でなければ{
          呼び出し履歴 << :否定節
          :甲
        }.であるなら{
          呼び出し履歴 << :肯定節
          :乙
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が真' => [ 真値, [ :条件節, :肯定節 ], :甲 ],
           '条件が偽' => [ 偽値, [ :条件節 ],          無値 ])
      試験('単独の肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.であるなら{
          呼び出し履歴 << :肯定節
          :甲
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が偽' => [ 偽値, [ :条件節, :否定節 ], :甲 ],
           '条件が真' => [ 真値, [ :条件節 ],          無値 ])
      試験('単独の逆肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.でなければ{
          呼び出し履歴 << :否定節
          :甲
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立'   => [ :甲, [ :最初の条件節, :最初の肯定節 ],                                 :イ ],
           '2番目が成立'   => [ :乙, [ :最初の条件節, :第二の条件節, :第二の肯定節 ],                  :ロ ],
           '3番目が成立'   => [ :丙, [ :最初の条件節, :第二の条件節, :第三の条件節, :第三の肯定節 ],   :ハ ],
           '条件が不成立'  => [ :他, [ :最初の条件節, :第二の条件節, :第三の条件節, :その他の終了節 ], :ニ ])
      試験('連続した肯否分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :最初の条件節
          分岐の値 == :甲
        }.であるなら{
          呼び出し履歴 << :最初の肯定節
          :イ
        }.もし条件が{
          呼び出し履歴 << :第二の条件節
          分岐の値 == :乙
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし条件が{
          呼び出し履歴 << :第三の条件節
          分岐の値 == :丙
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.でなければ{
          呼び出し履歴 << :その他の終了節
          :ニ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立'   => [ :甲, [ :最初の条件節, :最初の肯定節 ],                                 :イ ],
           '2番目が成立'   => [ :乙, [ :最初の条件節, :第二の条件節, :第二の肯定節 ],                  :ロ ],
           '3番目が成立'   => [ :丙, [ :最初の条件節, :第二の条件節, :第三の条件節, :第三の肯定節 ],   :ハ ],
           '条件が不成立'  => [ :他, [ :最初の条件節, :第二の条件節, :第三の条件節 ],                  無値 ])
      試験('終了節が無い連続した肯否分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :最初の条件節
          分岐の値 == :甲
        }.であるなら{
          呼び出し履歴 << :最初の肯定節
          :イ
        }.もし条件が{
          呼び出し履歴 << :第二の条件節
          分岐の値 == :乙
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし条件が{
          呼び出し履歴 << :第三の条件節
          分岐の値 == :丙
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立' => [
             :甲,
             [ :開始節, :第一の条件節, :第一の肯定節 ],
             :イ
           ],
           '2の1番目が成立' => [
             :乙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の肯定節 ],
             :ロ
           ],
           '2の2番目が成立' => [
             :丙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の肯定節 ],
             :ロ
           ],
           '2の3番目が成立' => [
             :丁,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第二の肯定節 ],
             :ロ
           ],
           '3番目が成立' => [
             :戊,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節, :第三の肯定節 ],
             :ハ
           ],
           '条件が不成立' => [
             :他,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節, :その他の終了節 ],
             :ニ
           ],
          )
      試験('条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :第一の条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :第一の肯定節
          :イ
        }.もし{
          呼び出し履歴 << :第二の条件節1
          :乙
        }.か{
          呼び出し履歴 << :第二の条件節2
          :丙
        }.か{
          呼び出し履歴 << :第二の条件節3
          :丁
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし{
          呼び出し履歴 << :第三の条件節
          :戊
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.でなければ{
          呼び出し履歴 << :その他の終了節
          :ニ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立' => [
             :甲,
             [ :開始節, :第一の条件節, :第一の肯定節 ],
             :イ
           ],
           '2の1番目が成立' => [
             :乙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の肯定節 ],
             :ロ
           ],
           '2の2番目が成立' => [
             :丙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の肯定節 ],
             :ロ
           ],
           '2の3番目が成立' => [
             :丁,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第二の肯定節 ],
             :ロ
           ],
           '3番目が成立' => [
             :戊,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節, :第三の肯定節 ],
             :ハ
           ],
           '条件が不成立' => [
             :他,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節 ],
             無値
           ],
          )
      試験('終了節が無い条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :第一の条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :第一の肯定節
          :イ
        }.もし{
          呼び出し履歴 << :第二の条件節1
          :乙
        }.か{
          呼び出し履歴 << :第二の条件節2
          :丙
        }.か{
          呼び出し履歴 << :第二の条件節3
          :丁
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし{
          呼び出し履歴 << :第三の条件節
          :戊
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が成立'   => [ :甲, [ :開始節, :条件節, :肯定節 ], :イ ],
           '条件が不成立' => [ :乙, [ :開始節, :条件節, :否定節 ], :ロ ])
      試験('二項の条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :肯定節
          :イ
        }.でなければ{
          呼び出し履歴 << :否定節
          :ロ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が成立'   => [ :甲, [ :開始節, :条件節, :肯定節 ], :イ ],
           '条件が不成立' => [ :乙, [ :開始節, :条件節 ],          無値 ])
      試験('単独の条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :肯定節
          :イ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      試験('条件が無い条件分岐命令を確認') {
        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          :甲
        }.でなければ{
          呼び出し履歴 << :終了節
          :イ
        }.である

        等しいことを確認([ :終了節 ], 呼び出し履歴)
        等しいことを確認(:イ, 評価結果)
      }

      試験('成立条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件なら{
          呼び出し履歴 << :条件
          回数 < 10
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し ] * 10 + [ :条件 ], 呼び出し履歴)
        等しいことを確認(10, 回数)
        無値であることを確認(評価結果)
      }

      試験('成立条件の繰り返し命令の制御を確認') {
        呼び出し履歴 = []
        回数 = 0
        再実行するか = 真値

        評価結果 = \
        この条件なら{
          呼び出し履歴 << :条件
          回数 < 10
        }.繰り返す{|制御|
          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          呼び出し履歴 << :繰り返し
          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し,            # 回数: 0
                           :条件, :繰り返し,            # 回数: 1
                           :条件, :繰り返し,            # 回数: 2
                           :条件,                       # 回数: 3
                           :条件, :繰り返し,            # 回数: 4
                           :条件, :繰り返し, :繰り返し, # 回数: 5
                           :条件, :繰り返し,            # 回数: 6
                           :条件,                       # 回数: 7
                         ],
                         呼び出し履歴)
        等しいことを確認(7, 回数)
        等しいことを確認(:中断, 評価結果)
      }

      試験('空の成立条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件なら{
          呼び出し履歴 << :条件
          偽値
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件 ], 呼び出し履歴)
        等しいことを確認(0, 回数)
        無値であることを確認(評価結果)
      }

      試験('到達条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件まで{
          呼び出し履歴 << :条件
          回数 == 10
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し ] * 10 + [ :条件 ], 呼び出し履歴)
        等しいことを確認(10, 回数)
        無値であることを確認(評価結果)
      }

      試験('到達条件の繰り返し命令の制御を確認') {
        呼び出し履歴 = []
        回数 = 0
        再実行するか = 真値

        評価結果 = \
        この条件まで{
          呼び出し履歴 << :条件
          回数 == 10
        }.繰り返す{|制御|
          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          呼び出し履歴 << :繰り返し
          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し,            # 回数: 0
                           :条件, :繰り返し,            # 回数: 1
                           :条件, :繰り返し,            # 回数: 2
                           :条件,                       # 回数: 3
                           :条件, :繰り返し,            # 回数: 4
                           :条件, :繰り返し, :繰り返し, # 回数: 5
                           :条件, :繰り返し,            # 回数: 6
                           :条件,                       # 回数: 7
                         ],
                         呼び出し履歴)
        等しいことを確認(7, 回数)
        等しいことを確認(:中断, 評価結果)
      }

      試験('空の到達条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件まで{
          呼び出し履歴 << :条件
          真値
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件 ], 呼び出し履歴)
        等しいことを確認(0, 回数)
        無値であることを確認(評価結果)
      }
    }
  }
}

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
