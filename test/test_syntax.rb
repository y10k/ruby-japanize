# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/syntax'
要求 'japanize/test_unit'

部(日本語化) {
  部(:試験) {
    組(:制御命令の試験, 原型: 試験単位::試験事例) {
      資料('条件が真' => [ 真値, [ :条件節, :肯定節 ], :甲 ],
           '条件が偽' => [ 偽値, [ :条件節, :否定節 ], :乙 ])
      試験('肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.であるなら{
          呼び出し履歴 << :肯定節
          :甲
        }.でなければ{
          呼び出し履歴 << :否定節
          :乙
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が偽' => [ 偽値, [ :条件節, :否定節 ], :甲 ],
           '条件が真' => [ 真値, [ :条件節, :肯定節 ], :乙 ])
      試験('逆肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.でなければ{
          呼び出し履歴 << :否定節
          :甲
        }.であるなら{
          呼び出し履歴 << :肯定節
          :乙
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が真' => [ 真値, [ :条件節, :肯定節 ], :甲 ],
           '条件が偽' => [ 偽値, [ :条件節 ],          無値 ])
      試験('単独の肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.であるなら{
          呼び出し履歴 << :肯定節
          :甲
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が偽' => [ 偽値, [ :条件節, :否定節 ], :甲 ],
           '条件が真' => [ 真値, [ :条件節 ],          無値 ])
      試験('単独の逆肯否分岐命令を確認') {|資料|
        分岐の条件, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :条件節
          分岐の条件
        }.でなければ{
          呼び出し履歴 << :否定節
          :甲
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立'   => [ :甲, [ :最初の条件節, :最初の肯定節 ],                                 :イ ],
           '2番目が成立'   => [ :乙, [ :最初の条件節, :第二の条件節, :第二の肯定節 ],                  :ロ ],
           '3番目が成立'   => [ :丙, [ :最初の条件節, :第二の条件節, :第三の条件節, :第三の肯定節 ],   :ハ ],
           '条件が不成立'  => [ :他, [ :最初の条件節, :第二の条件節, :第三の条件節, :その他の終了節 ], :ニ ])
      試験('連続した肯否分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :最初の条件節
          分岐の値 == :甲
        }.であるなら{
          呼び出し履歴 << :最初の肯定節
          :イ
        }.もし条件が{
          呼び出し履歴 << :第二の条件節
          分岐の値 == :乙
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし条件が{
          呼び出し履歴 << :第三の条件節
          分岐の値 == :丙
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.でなければ{
          呼び出し履歴 << :その他の終了節
          :ニ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立'   => [ :甲, [ :最初の条件節, :最初の肯定節 ],                                 :イ ],
           '2番目が成立'   => [ :乙, [ :最初の条件節, :第二の条件節, :第二の肯定節 ],                  :ロ ],
           '3番目が成立'   => [ :丙, [ :最初の条件節, :第二の条件節, :第三の条件節, :第三の肯定節 ],   :ハ ],
           '条件が不成立'  => [ :他, [ :最初の条件節, :第二の条件節, :第三の条件節 ],                  無値 ])
      試験('終了節が無い連続した肯否分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        もし条件が{
          呼び出し履歴 << :最初の条件節
          分岐の値 == :甲
        }.であるなら{
          呼び出し履歴 << :最初の肯定節
          :イ
        }.もし条件が{
          呼び出し履歴 << :第二の条件節
          分岐の値 == :乙
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし条件が{
          呼び出し履歴 << :第三の条件節
          分岐の値 == :丙
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      試験('正規表現の肯否分岐命令を確認') {
        呼び出し履歴 = []
        もし条件が{ '甲乙丙' =~ /乙/ }.であるなら{
          呼び出し履歴 << :肯定節
          等しいことを確認('乙', $&)
        }.でなければ{
          失敗させる
        }.である

        等しいことを確認([ :肯定節 ], 呼び出し履歴)
      }

      試験('正規表現の肯否分岐命令の逆順を確認') {
        呼び出し履歴 = []
        もし条件が{ '甲乙丙' =~ /乙/ }.でなければ{
          失敗させる
        }.であるなら{
          呼び出し履歴 << :肯定節
          等しいことを確認('乙', $&)
        }.である

        等しいことを確認([ :肯定節 ], 呼び出し履歴)
      }

      資料('1番目が成立' => [
             :甲,
             [ :開始節, :第一の条件節, :第一の肯定節 ],
             :イ
           ],
           '2の1番目が成立' => [
             :乙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の肯定節 ],
             :ロ
           ],
           '2の2番目が成立' => [
             :丙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の肯定節 ],
             :ロ
           ],
           '2の3番目が成立' => [
             :丁,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第二の肯定節 ],
             :ロ
           ],
           '3番目が成立' => [
             :戊,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節, :第三の肯定節 ],
             :ハ
           ],
           '条件が不成立' => [
             :他,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節, :その他の終了節 ],
             :ニ
           ])
      試験('条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :第一の条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :第一の肯定節
          :イ
        }.もし{
          呼び出し履歴 << :第二の条件節1
          :乙
        }.か{
          呼び出し履歴 << :第二の条件節2
          :丙
        }.か{
          呼び出し履歴 << :第二の条件節3
          :丁
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし{
          呼び出し履歴 << :第三の条件節
          :戊
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.でなければ{
          呼び出し履歴 << :その他の終了節
          :ニ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('1番目が成立' => [
             :甲,
             [ :開始節, :第一の条件節, :第一の肯定節 ],
             :イ
           ],
           '2の1番目が成立' => [
             :乙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の肯定節 ],
             :ロ
           ],
           '2の2番目が成立' => [
             :丙,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の肯定節 ],
             :ロ
           ],
           '2の3番目が成立' => [
             :丁,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第二の肯定節 ],
             :ロ
           ],
           '3番目が成立' => [
             :戊,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節, :第三の肯定節 ],
             :ハ
           ],
           '条件が不成立' => [
             :他,
             [ :開始節, :第一の条件節, :第二の条件節1, :第二の条件節2, :第二の条件節3, :第三の条件節 ],
             無値
           ])
      試験('終了節が無い条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :第一の条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :第一の肯定節
          :イ
        }.もし{
          呼び出し履歴 << :第二の条件節1
          :乙
        }.か{
          呼び出し履歴 << :第二の条件節2
          :丙
        }.か{
          呼び出し履歴 << :第二の条件節3
          :丁
        }.であるなら{
          呼び出し履歴 << :第二の肯定節
          :ロ
        }.もし{
          呼び出し履歴 << :第三の条件節
          :戊
        }.であるなら{
          呼び出し履歴 << :第三の肯定節
          :ハ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が成立'   => [ :甲, [ :開始節, :条件節, :肯定節 ], :イ ],
           '条件が不成立' => [ :乙, [ :開始節, :条件節, :否定節 ], :ロ ])
      試験('二項の条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :肯定節
          :イ
        }.でなければ{
          呼び出し履歴 << :否定節
          :ロ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('条件が成立'   => [ :甲, [ :開始節, :条件節, :肯定節 ], :イ ],
           '条件が不成立' => [ :乙, [ :開始節, :条件節 ],          無値 ])
      試験('単独の条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴, 期待する評価結果 = 資料

        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          分岐の値
        }.もし{
          呼び出し履歴 << :条件節
          :甲
        }.であるなら{
          呼び出し履歴 << :肯定節
          :イ
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      試験('条件が無い条件分岐命令を確認') {
        呼び出し履歴 = []
        評価結果 = \
        この値が{
          呼び出し履歴 << :開始節
          :甲
        }.でなければ{
          呼び出し履歴 << :終了節
          :イ
        }.である

        等しいことを確認([ :終了節 ], 呼び出し履歴)
        等しいことを確認(:イ, 評価結果)
      }

      資料('1番目が成立'    => [ '甲', [ :甲 ] ],
           '2の1番目が成立' => [ '乙', [ :乙丙 ] ],
           '2の2番目が成立' => [ '丙', [ :乙丙 ] ])
      試験('正規表現の条件分岐命令を確認') {|資料|
        分岐の値, 期待する呼び出し履歴 = 資料

        呼び出し履歴 = []
        この値が{
          分岐の値
        }.もし{ /甲/ }.であるなら{|正規表現が最後に一致した結果|            # スコープが異なるためRegexp.last_matchにアクセスできないので手続きの引数で受け取る
          呼び出し履歴 << :甲
          等しいことを確認('甲', 正規表現が最後に一致した結果[0])
        }.もし{ /乙/ }.か{ /丙/ }.であるなら{|正規表現が最後に一致した結果| # スコープが異なるためRegexp.last_matchにアクセスできないので手続きの引数で受け取る
          呼び出し履歴 << :乙丙
          含まれることを確認(%w[ 乙 丙 ], 正規表現が最後に一致した結果[0])
        }.でなければ{
          失敗させる
        }.である

        等しいことを確認(期待する呼び出し履歴, 呼び出し履歴)
      }

      資料('引数無し,名前付き引数無し' => [ [],       {} ],
           '引数有り,名前付き引数無し' => [ [ 'イ' ], {} ],
           '引数無し,名前付き引数有り' => [ [],       { イ: 'ロ' } ],
           '引数有り,名前付き引数有り' => [ [ 'イ'],  { ロ: 'ハ' } ])
      試験('手続きを渡す命令を確認') {|資料|
        呼び出しの引数, 呼び出しの名前付き引数 = 資料
        呼び出し履歴 = []

        ある物 = 物.新規
        ある物.特異組{
          定義(:ある操作) {|*引数, **名前付き引数, &塊|
            呼び出し履歴 << [ :開始, 引数, 名前付き引数 ]
            呼び出し履歴 << [ :甲, 塊[10] ]
            呼び出し履歴 << [ :乙, 塊[20] ]
            呼び出し履歴 << [ :丙, 塊[30] ]
            呼び出し履歴 << [ :丁, 塊[40] ]
            呼び出し履歴 << :終了
            :戊
          }
        }

        回数 = 0
        評価結果 = \
        手続きを渡す(ある物, :ある操作, *呼び出しの引数, **呼び出しの名前付き引数) {|制御, 数|
          呼び出し履歴 << [ :手続き, 数 ]
          回数 += 1
        }

        等しいことを確認([ [ :開始, 呼び出しの引数, 呼び出しの名前付き引数 ],
                           [ :手続き, 10 ], [ :甲, 1 ],
                           [ :手続き, 20 ], [ :乙, 2 ],
                           [ :手続き, 30 ], [ :丙, 3 ],
                           [ :手続き, 40 ], [ :丁, 4 ],
                           :終了
                         ],
                         呼び出し履歴)
        等しいことを確認(:戊, 評価結果)
      }

      試験('手続きを渡す命令の制御を確認') {
        呼び出し履歴 = []

        ある物 = 物.新規
        ある物.特異組{
          定義(:ある操作) {|&塊|
            呼び出し履歴 << :開始
            呼び出し履歴 << [ :甲, 塊[10] ]
            呼び出し履歴 << [ :乙, 塊[20] ]
            呼び出し履歴 << [ :丙, 塊[30] ]
            呼び出し履歴 << [ :丁, 塊[40] ]
            呼び出し履歴 << :終了
            :戊
          }
        }

        回数 = 0
        再実行するか = 真値

        評価結果 = \
        手続きを渡す(ある物, :ある操作) {|制御, 数|
          case (回数)
          when 1
            回数 += 1
            制御.次へ進む(-1)
          when 3
            制御.終わる(:己)
          end

          呼び出し履歴 << [ :手続き, 数 ]
          case (回数)
          when 2
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }

        等しいことを確認([ :開始,
                           [ :手続き, 10 ],                  [ :甲,  1 ],
                                                             [ :乙, -1 ], # 次へ進む
                           [ :手続き, 30 ], [ :手続き, 30 ], [ :丙,  3 ], # やり直す
                                                                          # 終わる
                         ],
                         呼び出し履歴)
        等しいことを確認(:己, 評価結果)
      }

      資料('引数無し,名前付き引数無し' => [ [],       {} ],
           '引数有り,名前付き引数無し' => [ [ 'イ' ], {} ],
           '引数無し,名前付き引数有り' => [ [],       { イ: 'ロ' } ],
           '引数有り,名前付き引数有り' => [ [ 'イ'],  { ロ: 'ハ' } ])
      試験('手続きを渡す命令が秘密の操作に失敗することを確認') {|資料|
        呼び出しの引数, 呼び出しの名前付き引数 = 資料
        呼び出し履歴 = []

        ある物 = 物.新規
        ある物.特異組{
          定義(:ある操作) {|*引数, **名前付き引数, &塊|
            呼び出し履歴 << [ :開始, 引数, 名前付き引数 ]
            呼び出し履歴 << [ :甲, 塊[10] ]
            呼び出し履歴 << [ :乙, 塊[20] ]
            呼び出し履歴 << [ :丙, 塊[30] ]
            呼び出し履歴 << [ :丁, 塊[40] ]
            呼び出し履歴 << :終了
            :戊
          }
          秘密 :ある操作
        }

        例外が発生することを確認(操作が無いため失敗) {
          手続きを渡す(ある物, :ある操作, *呼び出しの引数, **呼び出しの名前付き引数) {|制御, 数|
            失敗させる
          }
        }
      }

      資料('引数無し,名前付き引数無し' => [ [],       {} ],
           '引数有り,名前付き引数無し' => [ [ 'イ' ], {} ],
           '引数無し,名前付き引数有り' => [ [],       { イ: 'ロ' } ],
           '引数有り,名前付き引数有り' => [ [ 'イ'],  { ロ: 'ハ' } ])
      試験('手続きを渡す命令が秘密の操作を呼び出せることを確認') {|資料|
        呼び出しの引数, 呼び出しの名前付き引数 = 資料
        呼び出し履歴 = []

        ある物 = 物.新規
        ある物.特異組{
          定義(:ある操作) {|*引数, **名前付き引数, &塊|
            呼び出し履歴 << [ :開始, 引数, 名前付き引数 ]
            呼び出し履歴 << [ :甲, 塊[10] ]
            呼び出し履歴 << [ :乙, 塊[20] ]
            呼び出し履歴 << [ :丙, 塊[30] ]
            呼び出し履歴 << [ :丁, 塊[40] ]
            呼び出し履歴 << :終了
            :戊
          }
          秘密 :ある操作
        }

        回数 = 0
        評価結果 = \
        手続きを渡す(ある物, :ある操作, *呼び出しの引数, 秘密の操作を許可: 真値, **呼び出しの名前付き引数) {|制御, 数|
          呼び出し履歴 << [ :手続き, 数 ]
          回数 += 1
        }

        等しいことを確認([ [ :開始, 呼び出しの引数, 呼び出しの名前付き引数 ],
                           [ :手続き, 10 ], [ :甲, 1 ],
                           [ :手続き, 20 ], [ :乙, 2 ],
                           [ :手続き, 30 ], [ :丙, 3 ],
                           [ :手続き, 40 ], [ :丁, 4 ],
                           :終了
                         ],
                         呼び出し履歴)
        等しいことを確認(:戊, 評価結果)
      }

      試験('手続きを渡す命令が自分の秘密の操作を呼び出せることを確認') {
        呼び出し履歴 = []
        評価結果 = nil

        ある物 = 物.新規
        ある物.特異組{
          定義(:ある操作) {|&塊|
            呼び出し履歴 << :開始
            呼び出し履歴 << [ :甲, 塊[10] ]
            呼び出し履歴 << [ :乙, 塊[20] ]
            呼び出し履歴 << [ :丙, 塊[30] ]
            呼び出し履歴 << [ :丁, 塊[40] ]
            呼び出し履歴 << :終了
            :戊
          }
          秘密 :ある操作

          定義(:手続きを渡してある操作を実行する) {
            回数 = 0
            評価結果 = \
            手続きを渡す(自分, :ある操作) {|制御, 数|
              呼び出し履歴 << [ :手続き, 数 ]
              回数 += 1
            }
          }
        }

        ある物.手続きを渡してある操作を実行する
        等しいことを確認([ :開始,
                           [ :手続き, 10 ], [ :甲, 1 ],
                           [ :手続き, 20 ], [ :乙, 2 ],
                           [ :手続き, 30 ], [ :丙, 3 ],
                           [ :手続き, 40 ], [ :丁, 4 ],
                           :終了
                         ],
                         呼び出し履歴)
        等しいことを確認(:戊, 評価結果)
      }

      試験('成立条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件なら{
          呼び出し履歴 << :条件
          回数 < 10
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し ] * 10 + [ :条件 ], 呼び出し履歴)
        等しいことを確認(10, 回数)
        無値であることを確認(評価結果)
      }

      試験('成立条件の繰り返し命令の制御を確認') {
        呼び出し履歴 = []
        回数 = 0
        再実行するか = 真値

        評価結果 = \
        この条件なら{
          呼び出し履歴 << :条件
          回数 < 10
        }.繰り返す{|制御|
          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          呼び出し履歴 << :繰り返し
          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し,            # 回数: 0
                           :条件, :繰り返し,            # 回数: 1
                           :条件, :繰り返し,            # 回数: 2
                           :条件,                       # 回数: 3
                           :条件, :繰り返し,            # 回数: 4
                           :条件, :繰り返し, :繰り返し, # 回数: 5
                           :条件, :繰り返し,            # 回数: 6
                           :条件,                       # 回数: 7
                         ],
                         呼び出し履歴)
        等しいことを確認(7, 回数)
        等しいことを確認(:中断, 評価結果)
      }

      試験('空の成立条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件なら{
          呼び出し履歴 << :条件
          偽値
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件 ], 呼び出し履歴)
        等しいことを確認(0, 回数)
        無値であることを確認(評価結果)
      }

      試験('正規表現の成立条件の繰り返し命令を確認') {
        回数 = 0

        入力 = %w[ 甲 甲 甲 乙 ]
        この条件なら{ 入力[0] =~ /甲/ }.繰り返す{
          入力.shift
          回数 += 1
          等しいことを確認('甲', $&)
        }

        等しいことを確認(3, 回数)
      }

      試験('到達条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件まで{
          呼び出し履歴 << :条件
          回数 == 10
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し ] * 10 + [ :条件 ], 呼び出し履歴)
        等しいことを確認(10, 回数)
        無値であることを確認(評価結果)
      }

      試験('到達条件の繰り返し命令の制御を確認') {
        呼び出し履歴 = []
        回数 = 0
        再実行するか = 真値

        評価結果 = \
        この条件まで{
          呼び出し履歴 << :条件
          回数 == 10
        }.繰り返す{|制御|
          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          呼び出し履歴 << :繰り返し
          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }

        等しいことを確認([ :条件, :繰り返し,            # 回数: 0
                           :条件, :繰り返し,            # 回数: 1
                           :条件, :繰り返し,            # 回数: 2
                           :条件,                       # 回数: 3
                           :条件, :繰り返し,            # 回数: 4
                           :条件, :繰り返し, :繰り返し, # 回数: 5
                           :条件, :繰り返し,            # 回数: 6
                           :条件,                       # 回数: 7
                         ],
                         呼び出し履歴)
        等しいことを確認(7, 回数)
        等しいことを確認(:中断, 評価結果)
      }

      試験('空の到達条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        この条件まで{
          呼び出し履歴 << :条件
          真値
        }.繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }

        等しいことを確認([ :条件 ], 呼び出し履歴)
        等しいことを確認(0, 回数)
        無値であることを確認(評価結果)
      }

      試験('正規表現の到達条件の繰り返し命令を確認') {
        回数 = 0

        入力 = %w[ 甲 甲 甲 乙 ]
        この条件まで{ 入力[0] =~ /乙/ }.繰り返す{
          入力.shift
          回数 += 1
        }
        等しいことを確認('乙', $&)

        等しいことを確認(3, 回数)
      }

      試験('後置成立条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }.この条件なら{
          呼び出し履歴 << :条件
          回数 < 10
        }

        等しいことを確認([ :繰り返し, :条件 ] * 10, 呼び出し履歴)
        等しいことを確認(10, 回数)
        無値であることを確認(評価結果)
      }

      試験('後置成立条件の繰り返し命令の制御を確認') {
        呼び出し履歴 = []
        回数 = 0
        再実行するか = 真値

        評価結果 = \
        繰り返す{|制御|
          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          呼び出し履歴 << :繰り返し
          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }.この条件なら{
          呼び出し履歴 << :条件
          回数 < 10
        }

        等しいことを確認([ :繰り返し, :条件,            # 回数: 0
                           :繰り返し, :条件,            # 回数: 1
                           :繰り返し, :条件,            # 回数: 2
                                      :条件,            # 回数: 3
                           :繰り返し, :条件,            # 回数: 4
                           :繰り返し, :繰り返し, :条件, # 回数: 5
                           :繰り返し, :条件,            # 回数: 6
                                                        # 回数: 7
                         ],
                         呼び出し履歴)
        等しいことを確認(7, 回数)
        等しいことを確認(:中断, 評価結果)
      }

      試験('空の後置成立条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }.この条件なら{
          呼び出し履歴 << :条件
          偽値
        }

        等しいことを確認([ :繰り返し, :条件 ], 呼び出し履歴)
        等しいことを確認(1, 回数)
        無値であることを確認(評価結果)
      }

      試験('後置到達条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }.この条件まで{
          呼び出し履歴 << :条件
          回数 == 10
        }

        等しいことを確認([ :繰り返し, :条件 ] * 10, 呼び出し履歴)
        等しいことを確認(10, 回数)
        無値であることを確認(評価結果)
      }

      試験('後置到達条件の繰り返し命令の制御を確認') {
        呼び出し履歴 = []
        回数 = 0
        再実行するか = 真値

        評価結果 = \
        繰り返す{|制御|
          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          呼び出し履歴 << :繰り返し
          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }.この条件まで{
          呼び出し履歴 << :条件
          回数 == 10
        }

        等しいことを確認([ :繰り返し, :条件,            # 回数: 0
                           :繰り返し, :条件,            # 回数: 1
                           :繰り返し, :条件,            # 回数: 2
                                      :条件,            # 回数: 3
                           :繰り返し, :条件,            # 回数: 4
                           :繰り返し, :繰り返し, :条件, # 回数: 5
                           :繰り返し, :条件,            # 回数: 6
                                                        # 回数: 7
                         ],
                         呼び出し履歴)
        等しいことを確認(7, 回数)
        等しいことを確認(:中断, 評価結果)
      }

      試験('空の後置到達条件の繰り返し命令を確認') {
        呼び出し履歴 = []
        回数 = 0

        評価結果 = \
        繰り返す{
          呼び出し履歴 << :繰り返し
          回数 += 1
        }.この条件まで{
          呼び出し履歴 << :条件
          真値
        }

        等しいことを確認([ :繰り返し, :条件 ], 呼び出し履歴)
        等しいことを確認(1, 回数)
        無値であることを確認(評価結果)
      }

      試験('繰り返し命令を確認') {
        ある配列 = %w[ 甲 乙 丙 ]

        回数 = 0
        評価結果 = \
        繰り返す(ある配列) {|_制御, 項目|
          回数 += 1
          case (回数)
          when 1
            等しいことを確認('甲', 項目)
          when 2
            等しいことを確認('乙', 項目)
          when 3
            等しいことを確認('丙', 項目)
          else
            失敗させる
          end
        }
        等しいことを確認(ある配列, 評価結果)
      }

      試験('繰り返し命令の制御を確認') {
        実行履歴 = []
        再実行するか = 真値

        評価結果 = \
        繰り返す(1..10) {|制御, 項目|
          case (項目)
          when 3
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          実行履歴 << 項目
          case (項目)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end
        }

        等しいことを確認([ 1, 2, 4, 5, 5, 6 ], 実行履歴)
        等しいことを確認(:中断, 評価結果)
      }

      試験('循環命令を確認') {
        回数 = 0
        実行履歴 = []

        評価結果 = \
        循環{|制御|
          回数 < 10 or 制御.終わる
          実行履歴 << 回数
          回数 += 1
        }

        等しいことを確認(10, 回数)
        等しいことを確認([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 実行履歴)
        無値であることを確認(評価結果)
      }

      試験('循環命令の制御を確認') {
        回数 = 0
        実行履歴 = []
        再実行するか = 真値

        評価結果 = \
        循環{|制御|
          回数 < 10 or 制御.終わる

          case (回数)
          when 3
            回数 += 1
            制御.次へ進む
          when 7
            制御.終わる(:中断)
          end

          実行履歴 << 回数

          case (回数)
          when 5
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
          end

          回数 += 1
        }

        等しいことを確認(7, 回数)
        等しいことを確認([ 0, 1, 2, 4, 5, 5, 6 ], 実行履歴)
        等しいことを確認(:中断, 評価結果)
      }

      試験('単純な領域を確認') {
        実行履歴 = []
        評価結果 = \
        領域{
          実行履歴 << :実行
          :甲
        }

        等しいことを確認([ :実行 ], 実行履歴)
        等しいことを確認(:甲, 評価結果)
      }

      資料('戻り値は無い' => [ 無値,         [] ],
           '1個の戻り値'  => [ :乙,          [ :乙 ] ],
           '2個の戻り値'  => [ [ :乙, :丙 ], [ :乙, :丙 ] ])
      試験('単純な領域からの脱出を確認') {|資料|
        期待する評価結果, 領域から戻す値の一覧 = 資料

        実行履歴 = []
        評価結果 = \
        領域{|制御|
          実行履歴 << :開始
          制御.戻る(*領域から戻す値の一覧)
          実行履歴 << :終了
          :甲
        }

        等しいことを確認([ :開始 ], 実行履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      資料('例外が無い時' => [
             無値,
             無値,
             [ :本処理の開始, :本処理の終了, :例外が無い, :後始末 ],
             :戊
           ],
           'ファイル終端のため失敗' => [
             ファイル終端のため失敗,
             '例外捕捉の試験',
             [ :本処理の開始, :入出力の失敗, :後始末 ],
             :乙
           ],
           '添字が範囲外のため失敗' => [
             添字が範囲外のため失敗,
             '例外捕捉の試験',
             [ :本処理の開始, :複数の例外を捕捉, :後始末 ],
             :丙
           ],
           '浮動小数点の定義域外のため失敗' => [
             浮動小数点の定義域外のため失敗,
             '例外捕捉の試験',
             [ :本処理の開始, :複数の例外を捕捉, :後始末 ],
             :丙
           ],
           '実行時の失敗' => [
             実行時の失敗,
             '例外捕捉の試験',
             [ :本処理の開始, :標準的な失敗, :本処理の開始, :標準的な失敗, :後始末 ],
             :丁
           ])
      試験('領域の折り返し処理を確認') {|資料|
        発生させる例外の型, 発生させる例外の伝文, 期待する実行履歴, 期待する評価結果 = 資料

        実行履歴 = []
        再実行するか = 真値

        評価結果 = \
        領域{|制御|
          制御.本処理{
            実行履歴 << :本処理の開始
            if (発生させる例外の型) then
              例外を発生 発生させる例外の型, 発生させる例外の伝文
            end
            実行履歴 << :本処理の終了
            :甲
          }
          制御.例外を捕捉(入出力の失敗) {|発生した例外|
            実行履歴 << :入出力の失敗
            一種であることを確認(入出力の失敗, 発生した例外)
            生成物であることを確認(ファイル終端のため失敗, 発生した例外)
            等しいことを確認(発生させる例外の伝文, 発生した例外.伝文)
            :乙
          }
          制御.例外を捕捉(添字が範囲外のため失敗, 範囲外のため失敗) {|発生した例外|
            実行履歴 << :複数の例外を捕捉
            確認([ 添字が範囲外のため失敗, 範囲外のため失敗               ].any?{|例外の型| 発生した例外.一種か? 例外の型   })
            確認([ 添字が範囲外のため失敗, 浮動小数点の定義域外のため失敗 ].any?{|例外の型| 発生した例外.生成物か? 例外の型 })
            等しいことを確認(発生させる例外の伝文, 発生した例外.伝文)
            :丙
          }
          制御.例外を捕捉{|発生した例外|
            実行履歴 << :標準的な失敗
            一種であることを確認(標準的な失敗, 発生した例外)
            生成物であることを確認(実行時の失敗, 発生した例外)
            等しいことを確認(発生させる例外の伝文, 発生した例外.伝文)
            if (再実行するか) then
              再実行するか = 偽値
              制御.やり直す
            end
            :丁
          }
          制御.例外が無い時{
            実行履歴 << :例外が無い
            :戊
          }
          制御.後始末{
            実行履歴 << :後始末
            :己
          }
        }

        等しいことを確認(期待する実行履歴, 実行履歴)
        等しいことを確認(期待する評価結果, 評価結果)
      }

      試験('領域の本処理を確認') {
        実行履歴 = []
        評価結果 =\
        領域{|制御|
          制御.本処理{
            実行履歴 << :本処理
            :甲
          }
        }

        等しいことを確認([ :本処理 ], 実行履歴)
        等しいことを確認(:甲, 評価結果)
      }

      試験('領域の本処理と後始末を確認') {
        実行履歴 = []
        評価結果 =\
        領域{|制御|
          制御.本処理{
            実行履歴 << :本処理
            :甲
          }
          制御.後始末{
            実行履歴 << :後始末
            :乙
          }
        }

        等しいことを確認([ :本処理, :後始末 ], 実行履歴)
        等しいことを確認(:甲, 評価結果)
      }

      試験('領域の本処理の例外による中断を確認') {
        実行履歴 = []

        例外が発生することを確認(実行時の失敗) {
          領域{|制御|
            制御.本処理{
              実行履歴 << :本処理の開始
              例外を発生 '例外による中断の試験'
              実行履歴 << :本処理の終了
            }
            制御.後始末{
              実行履歴 << :後始末
            }
          }
        }

        等しいことを確認([ :本処理の開始, :後始末 ], 実行履歴)
      }
    }
  }
}

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
