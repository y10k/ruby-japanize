# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/base'
要求 'japanize/names'

部(:制御構造) {
  組(:肯否分岐_条件節) {
    定義(:初期化) {|&塊|
      @条件 = 塊
    }

    定義(:であるなら) {|&塊|
      if (@条件[]) then
        制御構造::肯否分岐_有効な肯定節.新規(塊[])
      else
        制御構造::肯否分岐_無効な肯定節.新規
      end
    }

    定義(:でなければ) {|&塊|
      unless (@条件[]) then
        制御構造::肯否分岐_有効な否定節.新規(塊[])
      else
        制御構造::肯否分岐_無効な否定節.新規
      end
    }
  }

  組(:肯否分岐_有効な肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(@結果)
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_無効な継続条件節.新規(@結果)
    }
  }

  組(:肯否分岐_無効な肯定節) {
    定義(:である) {
      無値
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(塊[])
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_有効な継続条件節.新規(&塊)
    }
  }

  組(:肯否分岐_有効な否定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:であるなら) {|&塊|
      制御構造::肯否分岐_終了節.新規(@結果)
    }
  }

  組(:肯否分岐_無効な否定節) {
    定義(:である) {
      無値
    }

    定義(:であるなら) {|&塊|
      制御構造::肯否分岐_終了節.新規(塊[])
    }
  }

  組(:肯否分岐_有効な継続条件節) {
    定義(:初期化) {|&塊|
      @条件 = 塊
    }

    定義(:であるなら) {|&塊|
      if (@条件[]) then
        制御構造::肯否分岐_有効な継続条件の有効な肯定節.新規(塊[])
      else
        制御構造::肯否分岐_有効な継続条件の無効な肯定節.新規
      end
    }
  }

  組(:肯否分岐_無効な継続条件節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:であるなら) {|&塊|
      制御構造::肯否分岐_無効な継続条件の肯定節.新規(@結果)
    }
  }

  組(:肯否分岐_有効な継続条件の有効な肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_無効な継続条件節.新規(@結果)
    }

    定義(:でなければ) {
      制御構造::肯否分岐_終了節.新規(@結果)
    }
  }

  組(:肯否分岐_有効な継続条件の無効な肯定節) {
    定義(:である) {
      無値
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_有効な継続条件節.新規(&塊)
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(塊[])
    }
  }

  組(:肯否分岐_無効な継続条件の肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_無効な継続条件節.新規(@結果)
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(@結果)
    }
  }

  組(:肯否分岐_終了節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }
  }
}

部(:制御命令) {
  定義(:繰り返す) {|列挙できる物, &塊|
    for 項目 in 列挙できる物
      塊[項目]
    end
  }
  部の関数 :繰り返す

  定義(:もし条件が) {|&塊|
    制御構造::肯否分岐_条件節.新規(&塊)
  }
  部の関数 :もし条件が
}
付加 制御命令

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
