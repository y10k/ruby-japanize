# -*- coding: utf-8 -*-

require 'japanize/core'

要求 'japanize/base'
要求 'japanize/names'

部(:制御構造) {
  組(:肯否分岐_条件節) {
    定義(:初期化) {|&塊|
      @条件 = 塊
    }

    定義(:であるなら) {|&塊|
      if (@条件[]) then
        制御構造::肯否分岐_有効な肯定節.新規(塊[])
      else
        制御構造::肯否分岐_無効な肯定節.新規
      end
    }

    定義(:でなければ) {|&塊|
      unless (@条件[]) then
        制御構造::肯否分岐_有効な否定節.新規(塊[])
      else
        制御構造::肯否分岐_無効な否定節.新規
      end
    }
  }

  組(:肯否分岐_有効な肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(@結果)
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_無効な継続条件節.新規(@結果)
    }
  }

  組(:肯否分岐_無効な肯定節) {
    定義(:である) {
      無値
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(塊[])
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_有効な継続条件節.新規(&塊)
    }
  }

  組(:肯否分岐_有効な否定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:であるなら) {|&塊|
      制御構造::肯否分岐_終了節.新規(@結果)
    }
  }

  組(:肯否分岐_無効な否定節) {
    定義(:である) {
      無値
    }

    定義(:であるなら) {|&塊|
      制御構造::肯否分岐_終了節.新規(塊[])
    }
  }

  組(:肯否分岐_有効な継続条件節) {
    定義(:初期化) {|&塊|
      @条件 = 塊
    }

    定義(:であるなら) {|&塊|
      if (@条件[]) then
        制御構造::肯否分岐_有効な継続条件の有効な肯定節.新規(塊[])
      else
        制御構造::肯否分岐_有効な継続条件の無効な肯定節.新規
      end
    }
  }

  組(:肯否分岐_無効な継続条件節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:であるなら) {|&塊|
      制御構造::肯否分岐_無効な継続条件の肯定節.新規(@結果)
    }
  }

  組(:肯否分岐_有効な継続条件の有効な肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_無効な継続条件節.新規(@結果)
    }

    定義(:でなければ) {
      制御構造::肯否分岐_終了節.新規(@結果)
    }
  }

  組(:肯否分岐_有効な継続条件の無効な肯定節) {
    定義(:である) {
      無値
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_有効な継続条件節.新規(&塊)
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(塊[])
    }
  }

  組(:肯否分岐_無効な継続条件の肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:もし条件が) {|&塊|
      制御構造::肯否分岐_無効な継続条件節.新規(@結果)
    }

    定義(:でなければ) {|&塊|
      制御構造::肯否分岐_終了節.新規(@結果)
    }
  }

  組(:肯否分岐_終了節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }
  }

  組(:条件分岐_開始節) {
    定義(:初期化) {|&塊|
      @値 = 塊
    }

    定義(:もし) {|&塊|
      制御構造::条件分岐_有効な条件節.新規(@値[], &塊)
    }

    定義(:でなければ) {|&塊|
      制御構造::条件分岐_終了節.新規(塊[])
    }
  }

  組(:条件分岐_有効な条件節) {
    定義(:初期化) {|値, &塊|
      @値 = 値
      @条件 = 塊
    }

    定義(:条件に合うか?) {
      @条件[] === @値
    }
    秘密 :条件に合うか?

    定義(:か) {|&塊|
      制御構造::条件分岐_有効な追加条件節.新規(@値, 条件に合うか?, &塊)
    }

    定義(:であるなら) {|&塊|
      if (条件に合うか?) then
        制御構造::条件分岐_有効な条件節の有効な肯定節.新規(塊[])
      else
        制御構造::条件分岐_有効な条件節の無効な肯定節.新規(@値)
      end
    }
  }

  組(:条件分岐_無効な条件節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:か) {|&塊|
      制御構造::条件分岐_無効な追加条件節.新規(@結果)
    }

    定義(:であるなら) {|&塊|
      制御構造::条件分岐_無効な肯定節.新規(@結果)
    }
  }

  組(:条件分岐_有効な追加条件節) {
    定義(:初期化) {|値, 完了, &塊|
      @値 = 値
      @完了 = 完了
      @条件 = 塊
    }

    定義(:条件に合うか?) {
      @完了 || @条件[] === @値
    }
    秘密 :条件に合うか?

    定義(:か) {|&塊|
      制御構造::条件分岐_有効な追加条件節.新規(@値, 条件に合うか?, &塊)
    }

    定義(:であるなら) {|&塊|
      if (条件に合うか?) then
        制御構造::条件分岐_有効な条件節の有効な肯定節.新規(塊[])
      else
        制御構造::条件分岐_有効な条件節の無効な肯定節.新規(@値)
      end
    }
  }

  組(:条件分岐_無効な追加条件節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:か) {|&塊|
      自分
    }

    定義(:であるなら) {
      制御構造::条件分岐_無効な肯定節.新規(@結果)
    }
  }

  組(:条件分岐_有効な条件節の有効な肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:でなければ) {|&塊|
      制御構造::条件分岐_終了節.新規(@結果)
    }

    定義(:もし) {|&塊|
      制御構造::条件分岐_無効な条件節.新規(@結果)
    }
  }

  組(:条件分岐_有効な条件節の無効な肯定節) {
    定義(:初期化) {|値|
      @値 = 値
    }

    定義(:である) {
      無値
    }

    定義(:でなければ) {|&塊|
      制御構造::条件分岐_終了節.新規(塊[])
    }

    定義(:もし) {|&塊|
      制御構造::条件分岐_有効な条件節.新規(@値, &塊)
    }
  }

  組(:条件分岐_無効な肯定節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }

    定義(:でなければ) {|&塊|
      制御構造::条件分岐_終了節.新規(@結果)
    }

    定義(:もし) {|&塊|
      制御構造::条件分岐_無効な条件節.新規(@結果)
    }
  }

  組(:条件分岐_終了節) {
    定義(:初期化) {|結果|
      @結果 = 結果
    }

    定義(:である) {
      @結果
    }
  }

  組(:繰り返しの制御) {
    定義(:初期化) {|外札, 内札|
      @外札 = 外札
      @内札 = 内札
    }

    定義(:終わる) {|返り値=無値|
      脱出(@外札,  返り値)
    }

    定義(:次へ進む) {
      脱出(@内札, :次へ進む)
    }

    定義(:やり直す) {
      脱出(@内札, :やり直す)
    }
  }

  組(:成立条件の繰り返し) {
    定義(:初期化) {|&塊|
      @条件 = 塊
    }

    定義(:繰り返す) {|&塊|
      外札 = 物.新規
      内札 = 物.新規
      制御 = 制御構造::繰り返しの制御.新規(外札, 内札)

      補足(外札) {
        while (@条件[])
          命令 = 補足(内札) {
            塊[制御]
            無値
          }

          case (命令)
          when :次へ進む
            next
          when :やり直す
            redo
          end
        end

        無値
      }
    }
  }

  組(:到達条件の繰り返し) {
    定義(:初期化) {|&塊|
      @条件 = 塊
    }

    定義(:繰り返す) {|&塊|
      外札 = 物.新規
      内札 = 物.新規
      制御 = 制御構造::繰り返しの制御.新規(外札, 内札)

      補足(外札) {
        until (@条件[])
          命令 = 補足(内札) {
            塊[制御]
            無値
          }

          case (命令)
          when :次へ進む
            next
          when :やり直す
            redo
          end
        end

        無値
      }
    }
  }

  組(:後置条件の繰り返し) {
    定義(:初期化) {|&塊|
      @繰り返し = 塊
    }

    定義(:この条件なら) {|&条件|
      外札 = 物.新規
      内札 = 物.新規
      制御 = 制御構造::繰り返しの制御.新規(外札, 内札)

      補足(外札) {
        begin
          命令 = 補足(内札) {
            @繰り返し[制御]
            無値
          }

          case (命令)
          when :次へ進む
            next
          when :やり直す
            redo
          end
        end while (条件[])

        無値
      }
    }

    定義(:この条件まで) {|&条件|
      外札 = 物.新規
      内札 = 物.新規
      制御 = 制御構造::繰り返しの制御.新規(外札, 内札)

      補足(外札) {
        begin
          命令 = 補足(内札) {
            @繰り返し[制御]
            無値
          }

          case (命令)
          when :次へ進む
            next
          when :やり直す
            redo
          end
        end until (条件[])

        無値
      }
    }
  }

  定義(:列挙できる物を繰り返す) {|列挙できる物, &塊|
    外札 = 物.新規
    内札 = 物.新規
    制御 = 制御構造::繰り返しの制御.新規(外札, 内札)

    補足(外札) {
      for 項目 in 列挙できる物
        命令 = 補足(内札) {
          塊[制御, 項目]
          無値
        }

        case (命令)
        when :次へ進む
          next
        when :やり直す
          redo
        end
      end
    }
  }
  部の関数 :列挙できる物を繰り返す
}

部(:制御命令) {
  定義(:もし条件が) {|&塊|
    制御構造::肯否分岐_条件節.新規(&塊)
  }
  部の関数 :もし条件が

  定義(:この値が) {|&塊|
    制御構造::条件分岐_開始節.新規(&塊)
  }
  部の関数 :この値が

  定義(:この条件なら) {|&塊|
    制御構造::成立条件の繰り返し.新規(&塊)
  }

  定義(:この条件まで) {|&塊|
    制御構造::到達条件の繰り返し.新規(&塊)
  }

  定義(:繰り返す) {|*引数, &塊|
    unless (引数.empty?) then
      制御構造.列挙できる物を繰り返す(*引数, &塊)
    else
      制御構造::後置条件の繰り返し.新規(&塊)
    end
  }
  部の関数 :繰り返す
}
付加 制御命令

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
